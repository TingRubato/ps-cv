<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://tingrubato.github.io/ps-cv/feed.xml" rel="self" type="application/atom+xml"/><link href="https://tingrubato.github.io/ps-cv/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-10T04:50:03+00:00</updated><id>https://tingrubato.github.io/ps-cv/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Labels, Self-Fulfilling Prophecy</title><link href="https://tingrubato.github.io/ps-cv/blog/2025/reflection/" rel="alternate" type="text/html" title="Labels, Self-Fulfilling Prophecy"/><published>2025-03-06T00:00:00+00:00</published><updated>2025-03-06T00:00:00+00:00</updated><id>https://tingrubato.github.io/ps-cv/blog/2025/reflection</id><content type="html" xml:base="https://tingrubato.github.io/ps-cv/blog/2025/reflection/"><![CDATA[<style>.reveal{color:#0000;background:linear-gradient(90deg,#03a9f4,#f441a5,#ffeb3b,#03a9f4) no-repeat,linear-gradient(var(--global-text-color) 0 0) no-repeat;background-size:0 100%;-webkit-background-clip:padding-box;background-clip:padding-box,text;cursor:pointer;animation:hover 8s linear infinite}.reveal:before{content:'';position:relative;top:-5px;left:-5px;bottom:-5px;right:-5px;z-index:-1;background:linear-gradient(90deg,#03a9f4,#f441a5,#ffeb3b,#03a9f4);border-radius:40px;opacity:0;transition:1s;animation:hover 8s linear infinite}@keyframes t{to{background-size:150% 100%}}@keyframes b{to{background-position:-200% 0,0 0}}.glow-button{width:300px;border-radius:30px;position:relative;top:50%;left:50%;transform:translate(-50%,-50%);text-align:center;color:#fff;text-transform:uppercase;text-decoration:none;font-family:'Lucida Sans','Lucida Sans Regular','Lucida Grande','Lucida Sans Unicode',Geneva,Verdana,sans-serif;box-sizing:border-box;background:linear-gradient(90deg,#03a9f4,#f441a5,#ffeb3b,#03a9f4);background-size:400%;cursor:pointer;animation:hover 8s linear infinite}@keyframes hover{0%{background-position:0 0}100%{background-position:400%}}.glow-button:before{content:'';position:absolute;top:-5px;left:-5px;bottom:-5px;right:-5px;z-index:-1;background:linear-gradient(90deg,#03a9f4,#f441a5,#ffeb3b,#03a9f4);background-size:400%;border-radius:40px;opacity:0;transition:1s}.glow-button:hover:before{filter:blur(20px);opacity:1;animation:hover 8s linear infinite}</style> <script>document.addEventListener("DOMContentLoaded",function(){document.querySelectorAll(".reveal").forEach(function(t){t.style.animation="t 1.2s .5s both"}),document.querySelector(".glow-button").addEventListener("click",function(){document.querySelectorAll(".reveal").forEach(function(t){t.style.animation="t 1.2s .5s both, b 1.2s 1.3s both"})})});</script> <p>They say there are two types of people in this world: those trapped by mental health labels and those watching others get trapped. Getting stamped with <em>“anxiety disorder”</em> or <em>“depression”</em> is like getting a disability pass that grants you extra exam time? Sorry, but no. You’re just giving yourself a self-imposed debuff. There’s a fancy term in psychology called Neuroplasticity.<d-footnote>Neuroplasticity, also known as neural plasticity or brain plasticity, refers to the brain’s ability to adjust and reorganize itself throughout life by forming new neural connections<d-cite key="mateos-aparicioImpactStudyingBrain2019,rWhatNeuralPlasticity2017"></d-cite>. This dynamic property enables the nervous system to adapt and respond to various stimuli, including new experiences, learning, environmental changes, and injuries.<d-cite key="mateos-aparicioImpactStudyingBrain2019,WhatNeuroplasticityWhy"></d-cite></d-footnote></p> <p>In plain English, your brain isn’t a hard drive you can format, but <u>you can rewrite the data</u><d-cite key="puderbaughNeuroplasticity2025"></d-cite>. The real issue? Some folks cling to their diagnosis like it’s a lifetime membership card to a club they never wanted to join, proudly declaring to the world:</p> <blockquote> <p><em>“Look! This is me! Don’t expect me to change!”</em></p> </blockquote> <p>But here’s the truth: anxiety, depression, and many other psychological conditions are <strong>temporary states</strong>, <u>not permanent personality traits.</u></p> <p>These labels often work like the <strong>“honor student”</strong> and <strong>“troublemaker”</strong> badges in school, except they carry way more weight than a teacher’s comment. When you got called a bad student, at least you knew that acing the final might change your reputation. But a mental health label? Once it’s on, it can feel like an irreversible tattoo—one that convinces you it’s permanent, leaving you feeling powerless to fight it.</p> <p>So ask yourself:</p> <ol> <li> <p><strong>Does a label define who you are?</strong> <span class="reveal">Are you an anxious person, or are you a person experiencing anxiety? The difference is key. You are not HOT!—you just feel HOT.</span></p> </li> <li> <p><strong>Does a label dictate your fate?</strong> <span class="reveal">Anxiety and depression aren’t life sentences. Your mental state is more like a revolving door—you can step in or out.</span></p> </li> <li> <p><strong>Does a label excuse everything?</strong> <span class="reveal">Can’t communicate in an argument? Instead of admitting you need to improve, it’s “I have avoidant personality disorder, I can’t help it.” Relationship problems? Instead of fixing your communication, it’s ”I was born unlucky in love.” It’s like someone failing a driving test and saying, ”I was just born bad at wheels!”—when, in reality, they just need more practice.</span></p> </li> </ol> <div class="glow-button">Hint</div> <p>Slapping a diagnosis on everything makes life seem easier, doesn’t it? It’s like blaming Mercury retrograde for all your problems instead of admitting you just made bad decisions. Bonus points if it earns you some tragic main character energy. **But at some point, ** you have to ask yourself:</p> <blockquote> <p class="block-warning">Do you spend each day trying to embrace adulthood, or are you holding on to Neverland like Peter Pan, afraid of change?</p> </blockquote> <p>Staying the same might feel safe, but real life isn’t a fairytale—you don’t get to dodge growth forever. So instead of treating your label like a VIP pass to the “no-growth club,” try reading a few books on mindfulness or putting in some CBT practice. Don’t let your diagnosis turn you into a “mental health martyr”—stuck in Neverland while everyone else learns to navigate the real world.</p> <h2 id="2-the-social-psychology-of-labels-self-fulfilling-prophecy"><strong>2. The Social Psychology of Labels: Self-Fulfilling Prophecy</strong></h2> <p>Who are you? Who do you want to be? These are cliché questions in your college application, right up there with <em>“Describe a time you overcame adversity”</em> and <em>“What makes you unique?”</em> But the real kicker is—<strong>what do you believe about yourself?</strong> Because if you think you’re the main character, congrats—you just might be. If you think you’re doomed to be an NPC, well… enjoy being stuck in the background while everyone else moves the plot forward. Just don’t be the guy who insists his <em>dream school</em> is Harvard while submitting a last-minute essay written in Google Docs at 2 AM. We should dream big, <strong>but let’s not confuse ambition with staring at the ceiling</strong>, waiting for success to magically happen.</p> <p>There’s a <em>spooky</em> little concept in psychology called the <strong>self-fulfilling prophecy</strong><d-footnote>A self-fulfilling prophecy <d-cite key="edenLeadershipExpectationsPygmalion1992"></d-cite> (also known as the interpersonal expectancy effect) refers to a phenomenon in which an individual’s or group’s expectations about another person’s behavior ultimately lead the person to act in a way that aligns with those expectations, thereby making the prophecy come true.</d-footnote> In plain terms:</p> <blockquote> <p><em>“If you believe you’re useless, then congrats, you will become useless.”</em></p> </blockquote> <p>For example:</p> <ul> <li><em>“I have ADHD.”</em> → So you start five different projects at once, forget about them, then hyperfocus on reorganizing your entire room at 3 AM—because apparently, your life can’t move forward until your sock drawer is color-coded.</li> <li><em>“I suck at math.”</em> → So you surrender before even trying → Guess what? You really do suck at math.</li> <li><em>“I have chronic procrastination.”</em> → So you put things off for a lifetime, until even the Grim Reaper has to chase you for overdue KPIs. (Let’s just hope <em>he</em> procrastinates, too.)</li> </ul> <p>But let’s flip the script. What if, starting today, you look in the mirror and brainwash yourself with:</p> <blockquote> <p><em>“I am a highly disciplined and productive legend.”</em></p> </blockquote> <p>Sounds like the corporate world’s version of <em>“fake it till you make it,”</em> but research<d-cite key="edenLeadershipExpectationsPygmalion1992"></d-cite> shows this actually works. Your brain doesn’t have a built-in <strong>“fact-checker”</strong> for incoming information—it absorbs whatever you feed it. That’s why the intern who confidently calls themselves a ‘strategy consultant’ on LinkedIn might actually start believing it—and so might their next employer. Similarly, kids who are praised for being smart actually try harder to prove it, while kids constantly told <strong>“you’re bad at math”</strong> tend to avoid it altogether.</p> <p>So if you’re going to brainwash yourself, at least do it for good:</p> <ol> <li><strong>Adopt a Growth Mindset</strong> – Skills can be built<d-cite key="GrowthMindsetDefinition"></d-cite>; stop treating abilities as if they’re set in stone.</li> <li><strong>Base Self-Perception on Evidence</strong> – Don’t just <strong>feel</strong> like you’re bad at something—check your actual progress.</li> <li><strong>Change Your Environment</strong> – Surround yourself with people who push you forward, not a group of friends who sit around accepting their fate like doomed NPCs.</li> </ol> <h2 id="3-personality-traits-set-in-stone-or-flexible"><strong>3. Personality Traits: Set in Stone or Flexible?</strong></h2> <p>Some people think personality is as unchangeable as childhood food preferences. <em>“I liked sweets as a kid; I still like them now.”</em> Okay, but you also thought superheroes were the strongest beings in the world—until you realized a corporate executive with a black Amex card holds more power, while superheroes are out here picking up DoorDash shifts between saving the city just to make rent.</p> <p>Is personality really a rigid, permanent trait? The <strong>Big Five Personality Traits</strong> theory<d-cite key="BigFivePersonality"></d-cite> suggests traits like openness, conscientiousness, extraversion, agreeableness, and neuroticism tend to remain stable into adulthood. But stable doesn’t mean <strong>fixed</strong>. Maybe you’re an introvert, or maybe you just hate your job so much that even the office coffee machine gets more social interaction than you do as they all are advertizing their embedded ‘AI’.</p> <p>Consider this:</p> <ul> <li><strong>Are personality tests misleading you?</strong> – You took a quiz and got <em>“introvert”</em>, but if the drinks are flowing, you’re suddenly the life of the party.</li> <li><strong>Are you ignoring situational factors?</strong> – The same person on <em>Monday morning at 8 AM</em> vs. <em>Friday night at 5 PM</em> is basically a different species.</li> <li><strong>Are you confusing habits with personality?</strong> – Maybe you’re not <em>naturally</em> quiet—you just haven’t found the right topic to talk your head off about.</li> </ul> <p>In reality, personality isn’t about what you can or can’t do—it’s about what you tend to do and how comfortable you feel doing it. Keep quiet long enough, and you don’t just <em>seem</em> reserved—you <em>become</em> reserved. But speak up just once, and you might realize people aren’t thinking, “Wow, that was awkward,” but instead, “Finally! We’ve been waiting for you to say something.</p> <p>So, stay adaptable—treat life like a Wi-Fi router, always scanning for the best channel to get the strongest connection—because sometimes, life’s interference is just your neighbor streaming 4K cat videos at full bandwidth.</p> <p><strong>Ting’s Take:</strong> Personality isn’t a released album—it’s more like your Spotify Wrapped. It evolves based on your habits, surprises you with unexpected trends, and sometimes makes you wonder, “Did I really listen to that on repeat?” What you shape it into is entirely up to you.</p> <h2 id="final-thoughts"><strong>Final Thoughts:</strong></h2> <ul> <li>Use Psychology as a Tool, Not a Cage。</li> <li>Mental health labels aren’t your destiny. Stop treating them like <em>get-out-of-jail-free</em> cards.</li> <li>Personality isn’t set in stone. You’re way more adaptable than you think.</li> <li>Psychological theories aren’t just trivia to flex on Twitter—they exist to help you <strong>understand yourself</strong>.</li> <li>Awareness is great, but <strong>action is what really matters.</strong></li> </ul> <p>At the end of the day, life is a game. What matters most isn’t your <strong>starting stats</strong>—it’s how you <strong>allocate your points and play the game.</strong> Don’t let labels write your story. <strong>Rewrite your own script.</strong></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Do people embrace labels to seek identity, or just use them as an often-exploited excuse?]]></summary></entry><entry><title type="html">A Non-Exhaustive Portfolio</title><link href="https://tingrubato.github.io/ps-cv/blog/2025/guided-portfolio/" rel="alternate" type="text/html" title="A Non-Exhaustive Portfolio"/><published>2025-01-15T00:00:00+00:00</published><updated>2025-01-15T00:00:00+00:00</updated><id>https://tingrubato.github.io/ps-cv/blog/2025/guided-portfolio</id><content type="html" xml:base="https://tingrubato.github.io/ps-cv/blog/2025/guided-portfolio/"><![CDATA[<p>This portfolio is a curated selection of my musical, creative, technical, and scholarly works that highlight my skills and passion. Thank you for taking the time to explore me.</p> <h1 id="1projects"><strong>1.Projects</strong></h1> <div class="container-card project-card"> <div class="front side"> <div class="content"> <h3>A Soundless Metronome</h3> <p><strong>Key Words:</strong> TENS Unit, Electrical Impulses, Raspberry Pi, Rhythm Training, Physical Feedback, Music Practice</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>This project introduces a silent metronome that leverages TENS (Transcutaneous Electrical Nerve Stimulation) to deliver timed pulses. Instead of clicks or lights, musicians feel subtle muscle impulses, freeing them from the distractions of conventional metronomes. <a href="https://tingrubato.github.io/ps-cv/projects/Tensonome/">Click to read more</a></p> </div> </div> </div> <center><h2>Project 1: A Soundless Metronome</h2></center> <p><br/></p> <div class="container-card project-card"> <div class="front side"> <div class="content"> <h3>Quiet Cool: AI Enablement for Old Machines</h3> <p><strong>Key Words:</strong> Machine Learning, Old Hardware, Flask, Neural Networks, DIY Server Upgrades, Dell R720, AI Fan Control</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>Transform an aging Dell PowerEdge or similar server into a modern, AI-assisted platform with Python/Flask, neural networks, and real-time sensor control. This project shows how to balance noise, temperature, and performance via predictive modeling. <a href="https://tingrubato.github.io/ps-cv/projects/Quiet-Cool/">Click to read more</a></p> </div> </div> </div> <center><h2>Project 2: Quiet Cool: AI Enablement for Old Machines</h2></center> <p><br/></p> <div class="container-card project-card"> <div class="front side"> <div class="content"> <h3>A Quantified Way to Evaluate Your EB2-NIW Petition</h3> <p><strong>Key Words:</strong> EB2-NIW, Legal Analysis, Dhanasar Framework, Immigration Petitions, Conditional Logic, Weighted Scoring Model, Employment-Based Visa</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>This post introduces a structured mathematical model to evaluate EB2-NIW petitions under the <em>Matter of Dhanasar</em> framework. It proposes tiered scoring, threshold checks, and weighted components for clearer, more consistent adjudications. <a href="https://tingrubato.github.io/ps-cv/blog/2024/quantified-niw/">Click to read more</a></p> </div> </div> </div> <center><h2>Project 3: A Quantified Way to Evaluate Your EB2-NIW Petition</h2></center> <p><br/></p> <div class="container-card project-card"> <div class="front side"> <div class="content"> <h3>Ezzy Job Finder 🕵️‍♂️ With Animated Visualizations</h3> <p><strong>Key Words:</strong> Web Scraping, Automation, Python, Telegram Notifications, D3.js Visualizations, Job Market Insights</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>“Ezzy Job Finder” automates the hunt for new job postings by scraping websites, parsing results, and sending Telegram alerts. It also features interactive d3.js charts to visualize job trends, making the search process more insightful and efficient. <a href="https://tingrubato.github.io/ps-cv/blog/2024/ezzy-job/">Click to read more</a></p> </div> </div> </div> <center><h2>Project 4: Ezzy Job Finder 🕵️‍♂️ With Animated Visualizations</h2></center> <p><br/></p> <div class="container-card project-card"> <div class="front side"> <div class="content"> <h3>Monitor Your Homelab Using Grafana + Prometheus</h3> <p><strong>Key Words:</strong> Observability, Homelab, Grafana Dashboards, Prometheus Scraping, Time-Series Metrics, Data Visualization</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>This guide demonstrates how to set up Grafana and Prometheus to monitor servers, containers, or entire homelabs. From real-time data scraping to intuitive dashboards, learn how to visualize and manage system performance in style. <a href="https://tingrubato.github.io/ps-cv/blog/2024/observability/">Click to read more</a></p> </div> </div> </div> <center><h2>Project 5: Monitor Your Homelab Using Grafana + Prometheus</h2></center> <p><br/></p> <div class="container-card project-card"> <div class="front side"> <div class="content"> <h3>Cochlear Implants and Music Perception 🎵</h3> <p><strong>Key Words:</strong> Cochlear Implants, Music Cognition, Frequency Channels, Pitch, Sound Processing, Auditory Science</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>This article discusses the challenges cochlear implant wearers face in perceiving music. It examines the technology’s focus on speech frequencies, limited spectral resolution, and potential strategies—like hybrid devices and training—to improve musical enjoyment. <a href="https://tingrubato.github.io/ps-cv/projects/ci-simulator/">Click to read more</a></p> </div> </div> </div> <center><h2>Project 6: Cochlear Implants and Music Perception</h2></center> <p><br/></p> <h1 id="2-writing-samples">2. <strong>Writing samples</strong></h1> <div class="container-card research-card"> <div class="front side"> <div class="content"> <h3>3-D Analysis and Experimental Verification of a Novel Magnetic Lead Screw with Checkerboard Array Magnetic Pole</h3> <p><strong>Key Words:</strong> Magnetic Lead Screw, Checkerboard Array Pole, Energy Efficiency, Thrust Force, Analytical Model, Torque</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>This study introduces a novel checkerboard array pole (CAP) magnetic lead screw (MLS) designed to enhance energy efficiency by reducing permanent magnet consumption. The research leverages a 3-D sub-domain analytical model to evaluate magnetic field distribution, thrust force, and torque. Validation through finite element analysis (FEA) and experimental results demonstrates improved thrust and torque performance. <a href="#">Click to read more</a></p> </div> </div> </div> <center><h2>Manuscript 1: 3-D Analysis and Experimental Verification of a Novel Magnetic Lead Screw with Checkerboard Array Magnetic Pole</h2></center> <p><br/></p> <div class="container-card research-card"> <div class="front side"> <div class="content"> <h3>A 2-D Mesh-based Magnetic Equivalent Circuit Model for Hybrid Exciting Magnetic Lead Screw (HEMLS)</h3> <p><strong>Key Words:</strong> Magnetic Lead Screw, Magnetic Equivalent Circuit, Hybrid Excitation, Wave Energy Conversion, Dynamic Modeling</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>This research introduces a novel 2-D mesh-based Magnetic Equivalent Circuit (MEC) model tailored for Hybrid Exciting Magnetic Lead Screws (HEMLS). It reduces computational time in analyzing dynamic performance and optimal design. By simplifying the mesh structure and parameters, the study achieves accuracy while lowering computational costs. Comparisons with Finite Element Analysis validate its reliability and performance under varying conditions. <a href="https://ieeexplore.ieee.org/document/2024-SECSC-1317">Click to read more</a></p> </div> </div> </div> <center><h2>Manuscript 2: A 2-D MEC Model for HEMLS</h2></center> <p><br/></p> <div class="container-card research-card"> <div class="front side"> <div class="content"> <h3>Design, Optimization, and Experimental Study of a Novel Direct-Driven Linear-Rotary Wave Generator</h3> <p><strong>Key Words:</strong> Wave Energy Converter, Linear-Rotary Generator, Multi-Objective Optimization, Energy Transmission, Experimental Validation</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>This study presents a new direct-driven Linear-Rotary Wave Generator (LRWG) capable of converting low-speed linear motion from waves into high-speed rotational motion to generate electrical power. It incorporates a multi-objective optimization approach to improve energy conversion efficiency and reliability, validated through a prototype and experimental tests. The LRWG aims to advance wave energy conversion technology under harsh oceanic conditions. <a href="https://ieeexplore.ieee.org/document/TEC-01067-2023">Click to read more</a></p> </div> </div> </div> <center><h2>Manuscript 3: Design, Optimization, and Experimental Study of a Novel Linear-Rotary Wave Generator</h2></center> <p><br/></p> <h1 id="3-compositions">3. <strong>Compositions</strong></h1> <div class="container-card music-card"> <div class="front side"> <div class="content"> <h3>Barely Fugue</h3> <p><strong>Description:</strong> hmm, maybe not a fugue</p> <p><strong>Labels:</strong> Experimental, Piano</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>A unique experimental piano composition exploring unconventional rhythmic structures and tones.</p> <a href="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1930157858&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true" target="_blank">Listen on SoundCloud</a> </div> </div> </div> <center><h2>Composition 1: Barely Fugue</h2></center> <p><br/></p> <div class="container-card music-card"> <div class="front side"> <div class="content"> <h3>Begin Again</h3> <p><strong>Description:</strong> say goodbye to the darkest year of my life!</p> <p><strong>Labels:</strong> Emotional, Instrumental, Reflection</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>An emotional instrumental composition symbolizing resilience and renewal after challenging times.</p> <a href="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1930157858&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true" target="_blank">Listen on SoundCloud</a> </div> </div> </div> <center><h2>Composition 2: Begin Again</h2></center> <p><br/></p> <div class="container-card music-card"> <div class="front side"> <div class="content"> <h3>February in G 🎵</h3> <p><strong>Description:</strong> Being trapped, but hoping for the good.</p> <p><strong>Labels:</strong> Emotional, Solo Piano, Reflection</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>A hopeful and reflective solo piano piece capturing a mix of struggle and optimism.</p> <a href="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1455431401&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true" target="_blank">Listen on SoundCloud</a> </div> </div> </div> <center><h2>Composition 3: February in G 🎵</h2></center> <p><br/></p> <div class="container-card music-card"> <div class="front side"> <div class="content"> <h3>Tryout No.1</h3> <p><strong>Description:</strong> Totally Experimental</p> <p><strong>Labels:</strong> Experimental, Electronic</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>An experimental piece exploring electronic textures and soundscapes, pushing boundaries of composition.</p> <a href="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1977100827&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true" target="_blank">Listen on SoundCloud</a> </div> </div> </div> <center><h2>Composition 4: Tryout No.1</h2></center> <p><br/></p> <div class="container-card music-card"> <div class="front side"> <div class="content"> <h3>Wowtz For Lunatics 🎵</h3> <p><strong>Description:</strong> Something not very usual</p> <p><strong>Labels:</strong> Emotional, Trio, Reflection</p> </div> </div> <div class="back side"> <div class="content"> <h3>Overview:</h3> <p>A trio composition that ventures into unconventional harmonies and structures, evoking introspection.</p> <a href="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1399659322&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true" target="_blank">Listen on SoundCloud</a> </div> </div> </div> <center><h2>Composition 5: Wowtz For Lunatics 🎵</h2></center> <p><br/></p> <style>*{margin:0;padding:0;box-sizing:border-box}h2{font-size:16px;font-weight:300;margin-top:10px}.container-card{min-width:700px;min-height:220px;border-radius:20px;position:relative;-webkit-transition:1.5s ease-in-out;transition:1.5s ease-in-out;transform-style:preserve-3d}.side{position:absolute;text-align:center;width:100%;height:100%;padding:20px 50px;color:#fff;transform-style:preserve-3d;backface-visibility:hidden;border-radius:20px}.content{transform:translatez(70px) scale(0.8);line-height:1.5em}.content h3{position:relative}.content p{margin-top:50px;line-height:2em}.content h3:before{content:"";position:absolute;bottom:-5px;height:3px;background-color:#3e3;width:100px;left:50%;transform:translateX(-50%)}.music-card .front{background-color:#000;background-opacity:60%;background-image:url('/ps-cv/assets/img/music.png');background-size:cover;background-position:center}.music-card .back{background-color:#333;background-image:url('/ps-cv/assets/img/music.png');background-size:cover;background-position:center}.research-card .front{background-color:rgba(0,0,0,0.4);background-image:url('/ps-cv/assets/img/research.png');background-size:cover;background-position:center}.research-card .back{background-color:rgba(0,0,0,0.4);background-image:url('/ps-cv/assets/img/research.png');background-size:cover;background-position:center}.project-card .front{background-image:url('/ps-cv/assets/img/project.png');background-size:cover;background-position:center}.project-card .back{background-color:rgba(0,0,0,0.4);background-image:url('/ps-cv/assets/img/project.png');background-size:cover;background-position:center}.back{background-color:#333;transform:rotateY(180deg);z-index:0;padding-top:10px}.container-card:hover{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}.content h3{margin:10px 0;font-size:24px;color:#fff}.content p{font-size:14px;text-align:center;margin:5px 0;color:#fff}.content p strong{color:#fff}.h3{margin:5px 0}.content a{color:#1be9e6}</style>]]></content><author><name></name></author><summary type="html"><![CDATA[Explore a list of selected work for Digital Portfolio]]></summary></entry><entry><title type="html">A quantified way to evaluate your EB2-NIW Petition</title><link href="https://tingrubato.github.io/ps-cv/blog/2024/quantified-niw/" rel="alternate" type="text/html" title="A quantified way to evaluate your EB2-NIW Petition"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://tingrubato.github.io/ps-cv/blog/2024/quantified-niw</id><content type="html" xml:base="https://tingrubato.github.io/ps-cv/blog/2024/quantified-niw/"><![CDATA[<h2 id="introduction"><strong>Introduction</strong></h2> <p>The regulations outlined in 8 CFR § 204.5(k) define the eligibility criteria for second-preference employment-based immigrant visas (EB-2), including the requirements for a National Interest Waiver (NIW). Historically, petitions were evaluated under the <em>Matter of New York State Dept. of Transportation</em> (NYSDOT), a framework often criticized for its opaque standards and inconsistent application. In response, <em>Matter of Dhanasar</em>, 26 I&amp;N Dec. 884 (AAO 2016), introduced a clearer, more flexible three-prong test to guide U.S. Citizenship and Immigration Services (USCIS) adjudicators.</p> <p>Dhanasar’s three-prong framework requires that a petitioner demonstrate:</p> <ol> <li><strong>Substantial Merit and National Importance</strong></li> <li><strong>Positioning to Advance the Proposed Endeavor</strong></li> <li><strong>Balancing the National Interest</strong></li> </ol> <p>USCIS typically assesses these prongs sequentially. If <strong>Prong 1</strong> is not met, further analysis ends. Only upon passing <strong>Prong 1</strong> do they evaluate <strong>Prong 2</strong>, and only if both prongs are satisfied do they proceed to <strong>Prong 3</strong>. This hierarchical structure necessitates a mathematical model that reflects conditional progression, ensuring that each subsequent evaluation is grounded in the validated findings of the previous stage.</p> <p>Earlier attempts at modeling the NIW framework as independent axes in a three-dimensional coordinate system did not account for this sequential logic. Instead, we now introduce a refined, tiered model that aligns with the adjudication process. This approach uses a structured, stepwise scoring system, applying well-defined thresholds at each prong before advancing to the next. Such a model offers transparency, consistency, and the mathematical rigor needed to ensure equitable and logical adjudications.</p> <hr/> <h2 id="conceptual-foundations-sequential-evaluation-of-dhanasars-prongs"><strong>Conceptual Foundations: Sequential Evaluation of Dhanasar’s Prongs</strong></h2> <div id="chart-sunburst"></div> <script src="/ps-cv/assets/js/chart/chart-sunburst.js" defer=""></script> <script>document.addEventListener("DOMContentLoaded",function(){"function"==typeof renderSunburstChart?renderSunburstChart("#chart-sunburst"):console.error("Function 'renderSunburstChart' is not defined.")});</script> <p>Our improved mathematical model integrates conditional logic with weighted scoring. In essence, each prong is a “gate” that must be cleared before proceeding. This ensures that time and analytic effort are focused on the criteria relevant to the petitioner’s demonstrated accomplishments and potential. The model’s core principle is to maintain strict adherence to the Dhanasar framework while quantifying each determination to minimize subjectivity.</p> <hr/> <h3 id="prong-1-substantial-merit-and-national-importance"><strong>Prong 1: Substantial Merit and National Importance</strong></h3> <p>This first prong considers whether the proposed endeavor has substantial merit and national importance. Under <em>Matter of Dhanasar</em>, this includes fields such as education, technology, public health, or environmental improvements, and can account for direct or indirect benefits. Notably, an undertaking need not have an immediate quantifiable economic impact; it suffices if it presents a clear, plausible path to substantial merit on a national scale.</p> <h4 id="mathematical-model-for-prong-1"><strong>Mathematical Model for Prong 1:</strong></h4> <p>We employ a <strong>binary scoring matrix</strong> augmented by category importance. Each category contributes a point (1 or 0), and certain categories are “key” indicators with a higher weight. The petitioner’s total score is a weighted sum of these indicators. The final score is normalized to a scale of 0 to 8, allowing for straightforward interpretation.</p> <table> <thead> <tr> <th><strong>Category</strong></th> <th><strong>Criteria</strong></th> <th><strong>Base Score</strong></th> <th><strong>Weight</strong></th> <th><strong>Weighted Score</strong></th> </tr> </thead> <tbody> <tr> <td>Substantial Merit</td> <td>Contributions to major fields (science, tech, health, etc.)</td> <td>1 or 0</td> <td>1.0</td> <td>Score * Weight</td> </tr> <tr> <td>Non-Quantifiable Impact</td> <td>Establishes value even if not purely economic</td> <td>1 or 0</td> <td>0.8</td> <td>Score * Weight</td> </tr> <tr> <td>Prospective Scientific/Research Impact</td> <td>Potential for advancing knowledge</td> <td>1 or 0</td> <td>1.0</td> <td>Score * Weight</td> </tr> <tr> <td>Detailed Explanation of Merit</td> <td>Clear, well-substantiated rationale</td> <td>1 or 0</td> <td>1.0</td> <td>Score * Weight</td> </tr> <tr> <td>National/Global Implications</td> <td>Broad scope, beyond local/regional</td> <td>1 or 0</td> <td>1.0</td> <td>Score * Weight</td> </tr> <tr> <td>Potential Economic Impact</td> <td>Prospects for job creation or economic growth</td> <td>1 or 0</td> <td>0.9</td> <td>Score * Weight</td> </tr> <tr> <td>Focused Regional Impact but Broad Relevance</td> <td>Locally rooted but with lessons/benefits of wider interest</td> <td>1 or 0</td> <td>0.9</td> <td>Score * Weight</td> </tr> <tr> <td>Specificity of Contribution</td> <td>Petitioner’s unique role and importance</td> <td>1 or 0</td> <td>1.0</td> <td>Score * Weight</td> </tr> </tbody> </table> <ul> <li><strong>Passing Threshold:</strong> Calculate the weighted sum: \(\text{Prong 1 Score} = \sum (\text{Score}_i \times \text{Weight}_i)\) Prong 1 is satisfied if the weighted sum ≥ 6.0.</li> </ul> <p><strong>Outcome:</strong> Pass or Fail. If the petitioner passes Prong 1, proceed to Prong 2.</p> <hr/> <h3 id="prong-2-positioning-to-advance-the-proposed-endeavor"><strong>Prong 2: Positioning to Advance the Proposed Endeavor</strong></h3> <p>If Prong 1 is met, we consider whether the petitioner is well-positioned to realize the endeavor’s potential. Factors include the petitioner’s expertise, the feasibility of their proposed plan, prior achievements, and external support. This prong is more nuanced and benefits from a weighted scoring model that acknowledges both the quality and relevance of evidence.</p> <h4 id="mathematical-model-for-prong-2"><strong>Mathematical Model for Prong 2:</strong></h4> <p>We use a weighted average approach. Each component receives points, then we normalize to a 100-point scale. This ensures balanced consideration of the petitioner’s qualifications and practical planning.</p> <table> <thead> <tr> <th><strong>Component</strong></th> <th><strong>Weight</strong></th> <th><strong>Max Points</strong></th> <th><strong>Description</strong></th> </tr> </thead> <tbody> <tr> <td>Education, Skills, Knowledge</td> <td>25%</td> <td>25</td> <td>Degrees, specialized training, and recognized expertise</td> </tr> <tr> <td>Record of Success</td> <td>25%</td> <td>25</td> <td>Publications, patents, awards, and notable achievements</td> </tr> <tr> <td>Model or Plan</td> <td>20%</td> <td>20</td> <td>Detailed strategic plan outlining milestones and risks</td> </tr> <tr> <td>Progress Made</td> <td>15%</td> <td>15</td> <td>Demonstrable advancement: prototypes, trials, pilots</td> </tr> <tr> <td>External Validation</td> <td>15%</td> <td>15</td> <td>Letters of support, MOUs, endorsements, partnerships</td> </tr> </tbody> </table> <p>Final Prong 2 score: \(\text{Prong 2 Score} = ( \text{Educ/Skills} + \text{Record} + \text{Plan} + \text{Progress} + \text{Validation} )\)</p> <p><strong>Normalization Example:</strong> If all components are scored out of their respective maximums and summed to a total of 100 points, simply sum the allocated points. If fewer than 70 points are earned, the petitioner fails Prong 2.</p> <ul> <li><strong>Passing Threshold:</strong> Prong 2 is satisfied if ≥ 70/100 points.</li> </ul> <p><strong>Outcome:</strong> Pass or Fail. If the petitioner passes Prong 2, proceed to Prong 3.</p> <hr/> <h3 id="prong-3-balancing-the-national-interest"><strong>Prong 3: Balancing the National Interest</strong></h3> <p>If the petitioner passes Prongs 1 and 2, we then consider whether, on balance, granting the NIW benefits the United States. This includes showing that requiring a labor certification would be contrary to the national interest, that the petitioner’s contribution is distinct enough to override labor market protections, and that there is a compelling, often time-sensitive reason for immediate implementation.</p> <h4 id="mathematical-model-for-prong-3"><strong>Mathematical Model for Prong 3:</strong></h4> <p>We apply a weighted scoring system focusing on three core factors, summing to 100 points:</p> <table> <thead> <tr> <th><strong>Factor</strong></th> <th><strong>Weight</strong></th> <th><strong>Max Points</strong></th> <th><strong>Description</strong></th> </tr> </thead> <tbody> <tr> <td>Impracticality of Labor Certification</td> <td>30%</td> <td>30</td> <td>Difficulty in replacing or replicating petitioner’s contributions through U.S. labor market testing</td> </tr> <tr> <td>Distinctive Contributions</td> <td>30%</td> <td>30</td> <td>Unique skill sets, exceptional talent, rare expertise</td> </tr> <tr> <td>Urgency of National Interest</td> <td>40%</td> <td>40</td> <td>Critical timing: immediate need to address pressing national objectives</td> </tr> </tbody> </table> <p>Sum the scores from each factor to yield a total out of 100. A robust showing in urgency or distinctiveness can offset slight shortfalls in other areas, reflecting a holistic assessment.</p> <ul> <li><strong>Passing Threshold:</strong> Prong 3 is satisfied if ≥ 75/100 points.</li> </ul> <p><strong>Outcome:</strong> Approval (if passed) or Denial (if failed).</p> <hr/> <h2 id="a-real-example-quantified-evaluation-for-niw-eligibility"><strong>A Real Example: Quantified Evaluation for NIW Eligibility</strong></h2> <p>Consider <strong>Dr. Jane Doe</strong>, a biomedical researcher using AI-driven diagnostics to improve early detection of pancreatic cancer.</p> <h3 id="prong-1-substantial-merit-and-national-importance-1"><strong>Prong 1: Substantial Merit and National Importance</strong></h3> <table> <thead> <tr> <th><strong>Category</strong></th> <th>Score</th> <th>Weight</th> <th>Weighted Score</th> </tr> </thead> <tbody> <tr> <td>Substantial Merit</td> <td>1</td> <td>1.0</td> <td>1.0</td> </tr> <tr> <td>Non-Quantifiable Impact</td> <td>1</td> <td>0.8</td> <td>0.8</td> </tr> <tr> <td>Prospective Scientific/Research Impact</td> <td>1</td> <td>1.0</td> <td>1.0</td> </tr> <tr> <td>Detailed Explanation of Merit</td> <td>1</td> <td>1.0</td> <td>1.0</td> </tr> <tr> <td>National/Global Implications</td> <td>1</td> <td>1.0</td> <td>1.0</td> </tr> <tr> <td>Potential Economic Impact</td> <td>1</td> <td>0.9</td> <td>0.9</td> </tr> <tr> <td>Focused Regional Impact, Broad Scope</td> <td>1</td> <td>0.9</td> <td>0.9</td> </tr> <tr> <td>Specificity of Contribution</td> <td>1</td> <td>1.0</td> <td>1.0</td> </tr> </tbody> </table> <blockquote> <h5 id="prong-1-score">PRONG 1 SCORE:</h5> <p><strong>Total Weighted Score:</strong> 1.0 + 0.8 + 1.0 + 1.0 + 1.0 + 0.9 + 0.9 + 1.0 = 7.6/8.0</p> <p class="block-blue">Prong 1 Passed (≥6.0 required).</p> </blockquote> <hr/> <h3 id="prong-2-positioning-to-advance-the-proposed-endeavor-1"><strong>Prong 2: Positioning to Advance the Proposed Endeavor</strong></h3> <table> <thead> <tr> <th><strong>Component</strong></th> <th>Score</th> </tr> </thead> <tbody> <tr> <td>Education, Skills, Knowledge (25 max)</td> <td>23/25</td> </tr> <tr> <td>Record of Success (25 max)</td> <td>20/25</td> </tr> <tr> <td>Model or Plan (20 max)</td> <td>18/20</td> </tr> <tr> <td>Progress Made (15 max)</td> <td>12/15</td> </tr> <tr> <td>External Validation (15 max)</td> <td>13/15</td> </tr> </tbody> </table> <blockquote> <h5 id="prong-2-score">PRONG 2 SCORE:</h5> <p><strong>Total Score:</strong> 23+20+18+12+13 = 86/100</p> <p class="block-blue">Prong 2 Passed (≥70 required).</p> </blockquote> <hr/> <h3 id="prong-3-balancing-the-national-interest-1"><strong>Prong 3: Balancing the National Interest</strong></h3> <table> <thead> <tr> <th><strong>Factor</strong></th> <th>Score</th> </tr> </thead> <tbody> <tr> <td>Impracticality of Labor Certification (30 max)</td> <td>28/30</td> </tr> <tr> <td>Distinctive Contributions (30 max)</td> <td>25/30</td> </tr> <tr> <td>Urgency of National Interest (40 max)</td> <td>35/40</td> </tr> </tbody> </table> <blockquote> <h5 id="prong-3-score">PRONG 3 SCORE:</h5> <p><strong>Total Score:</strong> 28+25+35 = 88/100</p> <p class="block-blue">Prong 3 Passed (≥75 required).</p> </blockquote> <h3 id="final-decision"><strong>Final Decision:</strong></h3> <p>Dr. Doe qualifies for the National Interest Waiver.</p> <hr/> <h2 id="conclusion-a-structured-quantifiable-approach"><strong>Conclusion: A Structured, Quantifiable Approach</strong></h2> <p>This refined model uses a staged, mathematically grounded methodology that mirrors the Dhanasar framework’s sequential logic. Prong 1’s foundational threshold ensures that only nationally significant endeavors proceed. Prong 2’s weighted scoring underscores the petitioner’s readiness and capability. Finally, Prong 3 balances these findings against the broader national interest, offering a transparent, consistent, and data-driven decision process. By integrating clear criteria, conditional logic, and numerical thresholds, this model enhances fairness, reduces subjectivity, and provides a roadmap for systematic NIW adjudication.</p>]]></content><author><name></name></author><category term="work"/><category term="legal"/><category term="analysis"/><summary type="html"><![CDATA[A quantified methods to evaluate your EB2-NIW petition.]]></summary></entry><entry><title type="html">Ezzy Job Finder 🕵️‍♂️ With Animated Visualizations</title><link href="https://tingrubato.github.io/ps-cv/blog/2024/ezzy-job/" rel="alternate" type="text/html" title="Ezzy Job Finder 🕵️‍♂️ With Animated Visualizations"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://tingrubato.github.io/ps-cv/blog/2024/ezzy-job</id><content type="html" xml:base="https://tingrubato.github.io/ps-cv/blog/2024/ezzy-job/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Job hunting is like online dating: it’s all about finding the right match before someone else swoops in. But instead of endlessly swiping (or scrolling), what if you could automate the process and get all the juicy details delivered to you on a silver platter? That’s the magic of web scraping, and today, we’re diving into building a job posting scraper with Python.</p> <p>Whether you’re a scraping newbie or an enthusiast looking to up your game, this guide will take you from zero to hero, one job listing at a time. By the end, you’ll have a fully functional tool that fetches the latest job opportunities and notifies you in real-time. Let’s go! 🚀</p> <h2 id="why-scraping">Why Scraping?🤔</h2> <p>Imagine waking up each morning with a fresh list of job opportunities—tailored to your preferences. No more manually sifting through job boards or missing out because you forgot to check. With a scraper:</p> <ul> <li><strong>Save Time</strong>: Automate repetitive searches.</li> <li><strong>Get Organized</strong>: Store job data neatly for analysis.</li> <li><strong>Stay Ahead</strong>: Receive real-time updates on the hottest listings.</li> </ul> <p>This tool isn’t just about automation—it’s about empowerment. You control the job search process while letting the script handle the tedious parts.</p> <h2 id="the-tech-stack">The Tech Stack</h2> <p>Here’s what powers our job scraper:</p> <ul> <li><strong>Python</strong>: The heart of the operation.</li> <li><strong>Undetected ChromeDriver</strong>: Bypasses pesky anti-bot measures by pretending to be a human.</li> <li><strong>BeautifulSoup &amp; lxml</strong>: Extracts meaningful data from HTML chaos.</li> <li><strong>Psycopg2</strong>: Talks to PostgreSQL, where we store all the data.</li> <li><strong>Telebot</strong>: Notifies you via Telegram, because who doesn’t love instant updates?</li> <li><strong>D3j</strong>: The beautiful and elegent part of visualization.</li> </ul> <h2 id="lets-build-it-">Let’s Build It 🚀</h2> <p>Below is a sequence diagram that represents the entire scrapping process.</p> <pre><code class="language-mermaid">
sequenceDiagram
    autonumber

    actor User

    participant Script as main()
    participant Notifier as TelebotNotifier
    participant DB as JobDatabase
    participant Browser as Browser
    participant Scraper as scrape_jobs()
    participant JobObj as Job

    User -&gt;&gt; Script: Run the script
    Script -&gt;&gt; Notifier: telebot_notifier.send_notification("Script started")
    Script -&gt;&gt; DB: db = JobDatabase()
    Script -&gt;&gt; Browser: browser = Browser()

    Script -&gt;&gt; Script: Prompt user for job keywords, locations, &amp; radius

    loop For each selected job_keyword
        Script -&gt;&gt; Script: Print "Searching for job keyword: ..."
        loop For each selected location_keyword
            Script -&gt;&gt; Script: Print "Searching in location: ..."
            Script -&gt;&gt; Scraper: scrape_jobs(db, browser, job_keyword, location_keyword, job_search_radius)

            Scraper -&gt;&gt; Browser: page_dom = browser.get_dom(pagination_url)
            Scraper -&gt;&gt; Browser: (Random sleeps, scrolling, etc.)
            alt If page_dom is None
                Scraper -&gt;&gt; Scraper: continue to next page
            else
                Scraper -&gt;&gt; Scraper: Parse job cards
                loop For each job card
                    Scraper -&gt;&gt; JobObj: job_obj = Job(job)
                    JobObj -&gt;&gt; JobObj: Extract job data&lt;br&gt;(title, company, date, etc.)

                    Scraper -&gt;&gt; DB: db.insert_record(record)
                end
            end
        end
    end

    Script -&gt;&gt; Browser: browser.close()
    Script -&gt;&gt; DB: db.close()
    Script -&gt;&gt; Notifier: telebot_notifier.send_notification("Script finished successfully")
    Script -&gt;&gt; User: End

</code></pre> <h3 id="step-1-setting-up-the-browser-">Step 1: Setting Up the Browser 🌐</h3> <p>Most job boards actively block bots. Undetected ChromeDriver ensures our scraper behaves like a real human. By randomizing user agents and browser behaviors, we stay under the radar.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">undetected_chromedriver</span> <span class="k">as</span> <span class="n">uc</span>
<span class="kn">import</span> <span class="n">random</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="k">class</span> <span class="nc">Browser</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">browser</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_browser</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">get_browser</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">user_agents</span> <span class="o">=</span> <span class="p">[</span>
            <span class="sh">"</span><span class="s">Mozilla/5.0 (Windows NT 10.0; Win64; x64)...</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)...</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">]</span>
        <span class="n">options</span> <span class="o">=</span> <span class="n">uc</span><span class="p">.</span><span class="nc">ChromeOptions</span><span class="p">()</span>
        <span class="n">options</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">--user-agent=</span><span class="si">{</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">user_agents</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">options</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--window-size=1920,1080</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">options</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--disable-blink-features=AutomationControlled</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">browser</span> <span class="o">=</span> <span class="n">uc</span><span class="p">.</span><span class="nc">Chrome</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="n">options</span><span class="p">,</span> <span class="n">headless</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">browser</span>

    <span class="k">def</span> <span class="nf">get_dom</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">browser</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
            <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">browser</span><span class="p">.</span><span class="n">page_source</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error fetching URL </span><span class="si">{</span><span class="n">url</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div> <blockquote> <h5 id="why-using-delays">Why Using Delays?</h5> <p>Random pauses mimic natural browsing behavior and reduce the risk of detection. If you’re feeling fancy, you could even simulate mouse movements and clicks for added realism.</p> </blockquote> <h3 id="step-2-scraping-the-listings">Step 2: Scraping the Listings📋</h3> <p>Using <strong>lxml</strong>, we extract job titles, companies, locations, and descriptions from the page. It’s like finding the signal in the noise, but make it Pythonic.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">lxml</span> <span class="kn">import</span> <span class="n">etree</span> <span class="k">as</span> <span class="n">et</span>

<span class="k">class</span> <span class="nc">Job</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_element</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">job</span> <span class="o">=</span> <span class="n">job_element</span>

    <span class="k">def</span> <span class="nf">get_job_title</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">job</span><span class="p">.</span><span class="nf">xpath</span><span class="p">(</span><span class="sh">"</span><span class="s">.//a[@class=</span><span class="sh">'</span><span class="s">job-title</span><span class="sh">'</span><span class="s">]/span/text()</span><span class="sh">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">except</span> <span class="nb">IndexError</span><span class="p">:</span>
            <span class="k">return</span> <span class="sh">"</span><span class="s">Not available</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">get_company_name</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">job</span><span class="p">.</span><span class="nf">xpath</span><span class="p">(</span><span class="sh">"</span><span class="s">.//span[@class=</span><span class="sh">'</span><span class="s">company-name</span><span class="sh">'</span><span class="s">]/text()</span><span class="sh">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">IndexError</span><span class="p">:</span>
            <span class="k">return</span> <span class="sh">"</span><span class="s">Not available</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">get_job_description</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">job</span><span class="p">.</span><span class="nf">xpath</span><span class="p">(</span><span class="sh">"</span><span class="s">.//div[@class=</span><span class="sh">'</span><span class="s">job-description</span><span class="sh">'</span><span class="s">]/text()</span><span class="sh">"</span><span class="p">))</span>
        <span class="k">except</span> <span class="nb">IndexError</span><span class="p">:</span>
            <span class="k">return</span> <span class="sh">"</span><span class="s">Not available</span><span class="sh">"</span>
</code></pre></div></div> <blockquote> <h5 id="quick-tip">Quick Tip</h5> <p>If the website structure changes, these XPath selectors may break. Regularly test your scraper to ensure compatibility.</p> </blockquote> <h3 id="step-3-storing-the-data-️">Step 3: Storing the Data 🗄️</h3> <p>With PostgreSQL, we can store job listings in a structured format for easy querying and analysis. This design allows you to track trends over time.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">psycopg2</span>
<span class="k">class</span> <span class="nc">JobDatabase</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">conn</span> <span class="o">=</span> <span class="n">psycopg2</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span>
            <span class="n">dbname</span><span class="o">=</span><span class="sh">"</span><span class="s">jobs_db</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">user</span><span class="o">=</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">host</span><span class="o">=</span><span class="sh">"</span><span class="s">localhost</span><span class="sh">"</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">create_table</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">create_table</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span> <span class="k">as</span> <span class="n">cur</span><span class="p">:</span>
            <span class="n">cur</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">"""</span><span class="s">
                CREATE TABLE IF NOT EXISTS jobs (
                    id SERIAL PRIMARY KEY,
                    title TEXT,
                    company TEXT,
                    description TEXT,
                    scraped_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            </span><span class="sh">"""</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">insert_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_data</span><span class="p">):</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span> <span class="k">as</span> <span class="n">cur</span><span class="p">:</span>
            <span class="n">cur</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">"""</span><span class="s">
                INSERT INTO jobs (title, company, description)
                VALUES (%s, %s, %s)
            </span><span class="sh">"""</span><span class="p">,</span> <span class="n">job_data</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
</code></pre></div></div> <h4 id="step-4-notifications-via-telegram-">Step 4: Notifications via Telegram 📲</h4> <p>Who wouldn’t want their scraper to double as a personal assistant? With Telebot, get instant alerts about job postings on your Telegram.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">telebot</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="k">class</span> <span class="nc">TelebotNotifier</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">bot_token</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">'</span><span class="s">TELEBOT_TOKEN</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chat_id</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">'</span><span class="s">TELEBOT_CHAT_ID</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">bot</span> <span class="o">=</span> <span class="n">telebot</span><span class="p">.</span><span class="nc">TeleBot</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bot_token</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">send_notification</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">bot</span><span class="p">.</span><span class="nf">send_message</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">chat_id</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Failed to send notification: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h4 id="step-5-scraping-in-action-">Step 5: Scraping in Action 🎬</h4> <p>Now, we stitch it all together into a scraper that fetches job listings, stores them, and keeps you updated.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">scrape_jobs</span><span class="p">(</span><span class="n">browser</span><span class="p">,</span> <span class="n">db</span><span class="p">,</span> <span class="n">notifier</span><span class="p">):</span>
    <span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://www.indeed.com/jobs?q=developer&amp;l=remote</span><span class="sh">"</span>
    <span class="n">page_source</span> <span class="o">=</span> <span class="n">browser</span><span class="p">.</span><span class="nf">get_dom</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">dom</span> <span class="o">=</span> <span class="n">et</span><span class="p">.</span><span class="nc">HTML</span><span class="p">(</span><span class="n">page_source</span><span class="p">)</span>
    <span class="n">job_elements</span> <span class="o">=</span> <span class="n">dom</span><span class="p">.</span><span class="nf">xpath</span><span class="p">(</span><span class="sh">"</span><span class="s">//div[@class=</span><span class="sh">'</span><span class="s">job_seen_beacon</span><span class="sh">'</span><span class="s">]</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">job_element</span> <span class="ow">in</span> <span class="n">job_elements</span><span class="p">:</span>
        <span class="n">job</span> <span class="o">=</span> <span class="nc">Job</span><span class="p">(</span><span class="n">job_element</span><span class="p">)</span>
        <span class="n">title</span> <span class="o">=</span> <span class="n">job</span><span class="p">.</span><span class="nf">get_job_title</span><span class="p">()</span>
        <span class="n">company</span> <span class="o">=</span> <span class="n">job</span><span class="p">.</span><span class="nf">get_company_name</span><span class="p">()</span>
        <span class="n">description</span> <span class="o">=</span> <span class="n">job</span><span class="p">.</span><span class="nf">get_job_description</span><span class="p">()</span>

        <span class="n">db</span><span class="p">.</span><span class="nf">insert_record</span><span class="p">((</span><span class="n">title</span><span class="p">,</span> <span class="n">company</span><span class="p">,</span> <span class="n">description</span><span class="p">))</span>
        <span class="n">notifier</span><span class="p">.</span><span class="nf">send_notification</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">New Job: </span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s"> at </span><span class="si">{</span><span class="n">company</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Processed: </span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s"> at </span><span class="si">{</span><span class="n">company</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">db</span> <span class="o">=</span> <span class="nc">JobDatabase</span><span class="p">()</span>
    <span class="n">browser</span> <span class="o">=</span> <span class="nc">Browser</span><span class="p">()</span>
    <span class="n">notifier</span> <span class="o">=</span> <span class="nc">TelebotNotifier</span><span class="p">()</span>

    <span class="nf">scrape_jobs</span><span class="p">(</span><span class="n">browser</span><span class="p">,</span> <span class="n">db</span><span class="p">,</span> <span class="n">notifier</span><span class="p">)</span>

    <span class="n">browser</span><span class="p">.</span><span class="n">browser</span><span class="p">.</span><span class="nf">quit</span><span class="p">()</span>
    <span class="n">db</span><span class="p">.</span><span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div> <h3 id="challenges-and-how-we-solved-them-">Challenges and How We Solved Them 🔧</h3> <h4 id="1-anti-bot-measures">1. Anti-Bot Measures</h4> <ul> <li>Randomized user agents, browser options, and delays.</li> <li>Used <strong>Undetected ChromeDriver</strong> to blend in with regular users.</li> </ul> <h4 id="2-data-duplication">2. Data Duplication</h4> <p>Before inserting data into the database, ensure no duplicate entries exist by querying for existing job titles.</p> <blockquote> <h5 id="tips">Tips</h5> <p>Prevent duplicate entries by creating unique constraints in your database:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">jobs</span> <span class="k">ADD</span> <span class="k">CONSTRAINT</span> <span class="n">unique_job</span> <span class="k">UNIQUE</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">company</span><span class="p">);</span>
</code></pre></div> </div> </blockquote> <h4 id="3-dynamic-web-pages">3. Dynamic Web Pages</h4> <p>By using browser.get_dom with Selenium, we ensure the entire page loads before scraping.</p> <h3 id="ethical-web-scraping-">Ethical Web Scraping 🌐</h3> <p>Web scraping is powerful, but it comes with responsibilities:</p> <ol> <li><strong>Follow Terms of Service</strong>: Always check the website’s rules before scraping.</li> <li><strong>Be Polite</strong>: Use delays to avoid overwhelming servers.</li> <li><strong>Respect Privacy</strong>: Never scrape or use personal data without consent.</li> </ol> <h2 id="visualizations">Visualizations</h2> <p>Visualization is a key part of making the data more accessible and actionable. In this project, I leveraged D3.js, a JavaScript library for producing dynamic, interactive data visualizations in the browser. The two core visualizations include:</p> <ol> <li>GeoMap: Highlights job posting activity by region.</li> <li>Word Cloud: Showcases the frequency of company names based on job postings.</li> </ol> <p>These visualizations transform raw, tabular job data into visually intuitive representations, making it easier to uncover trends and insights.</p> <h3 id="geomap-visualizing-regional-job-trends-️">GeoMap: Visualizing Regional Job Trends 🗺️</h3> <p>The GeoMap provides a regional overview of job posting activity, helping users identify hotspots for job opportunities.</p> <h4 id="how-it-was-built">How It Was Built</h4> <ol> <li><strong>GeoJSON Data</strong>: <ul> <li>A GeoJSON file containing the geographical coordinates of U.S. states was used as the base map.</li> <li>Each region was linked with job counts processed from the PostgreSQL database.</li> </ul> </li> <li><strong>D3.js Mapping</strong>: <ul> <li>D3’s <code class="language-plaintext highlighter-rouge">geoPath</code> function was used to project the GeoJSON data onto an SVG canvas.</li> <li>A choropleth color scale (<code class="language-plaintext highlighter-rouge">d3.scaleSequential</code>) was applied, where darker shades represent regions with higher job posting activity.</li> </ul> </li> <li><strong>Interactive Tooltips</strong>: <ul> <li>When hovering over a state, the tooltip displays the number of job postings in that region.</li> </ul> </li> </ol> <div id="chart-job-map"></div> <script src="https://d3js.org/topojson.v3.min.js"></script> <script src="/ps-cv/assets/js/chart/chart-job-map.js" defer=""></script> <script>document.addEventListener("DOMContentLoaded",function(){"function"==typeof renderJobMap?renderJobMap("#chart-job-map","../assets/json/formatted.csv","Job Posting Visualization"):console.error("Function 'renderJobMap' is not defined.")});</script> <h3 id="word-cloud">Word Cloud</h3> <p>The Word Cloud focuses on employer frequency, visually showing which companies are posting the most jobs.</p> <h4 id="how-it-was-built-1">How It Was Built</h4> <ol> <li> <p><strong>Data Preprocessing</strong>:</p> <ul> <li>Job data was grouped by company name, with each name assigned a frequency count.</li> <li>Special characters (+) in company names were replaced with spaces for readability.</li> </ul> </li> <li> <p><strong>Dynamic Updates</strong>:</p> <ul> <li>The word cloud is connected to a scrubber widget that allows users to cycle through timestamps of job postings.</li> <li>As the scrubber moves, the word cloud dynamically updates to reflect the most active companies at that time.</li> </ul> </li> <li> <p><strong>D3 Cloud Layout</strong>:</p> <ul> <li>Word sizes were scaled using <code class="language-plaintext highlighter-rouge">Math.sqrt(frequency) * 20</code>, ensuring more frequent companies are visually prominent.</li> <li>Words were randomly rotated for visual variety.</li> </ul> </li> </ol> <div id="chart-word-cloud"></div> <script src="https://cdn.jsdelivr.net/npm/d3-cloud@1.2.7/build/d3.layout.cloud.min.js"></script> <script src="/ps-cv/assets/js/chart/chart-word-cloud.js" defer=""></script> <script>document.addEventListener("DOMContentLoaded",function(){"function"==typeof renderWordCloudChart?renderWordCloudChart("#chart-word-cloud"):console.error("Function 'renderWordCloudChart' is not defined.")});</script> <h2 id="conclusion-">Conclusion 🎉</h2> <p>And there you have it—a full-fledged Python scraper to tame the chaotic job market! This script not only fetches job postings but also transforms them into actionable insights, all while notifying you in real-time.</p> <p>So, what’s next? Scale it up to scrape multiple job boards, build analytics dashboards, or even integrate with a resume uploader for semi-automated job applications. Happy scraping!</p>]]></content><author><name></name></author><category term="automation"/><category term="data"/><category term="code"/><summary type="html"><![CDATA[Automate Job Postings Scraper with Python and elegent visualization using d3j]]></summary></entry><entry><title type="html">ML Enablement for Old Homelab</title><link href="https://tingrubato.github.io/ps-cv/blog/2024/quiet-cool/" rel="alternate" type="text/html" title="ML Enablement for Old Homelab"/><published>2024-04-14T04:30:00+00:00</published><updated>2024-04-14T04:30:00+00:00</updated><id>https://tingrubato.github.io/ps-cv/blog/2024/quiet-cool</id><content type="html" xml:base="https://tingrubato.github.io/ps-cv/blog/2024/quiet-cool/"><![CDATA[<h2 id="reading-time"><strong>Reading Time</strong></h2> <p>About as long as it takes your GPU fan to spin up to 100% and then ease back down as it ponders your newfound genius.</p> <hr/> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/ps-cv/assets/img/quietCool/ANNExplanationScene.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> </div> <div class="caption"> A VIDEO OF THE MAGIC BEHIND QUIET COOL </div> <h2 id="prerequisites"><strong>Prerequisites</strong></h2> <p>Before diving headlong into this GPU fan-control escapade, you’ll want to be comfortable with:</p> <ul> <li><strong>Basic Python &amp; Flask</strong>: Enough to spin up a simple web server and handle a few REST calls.</li> <li><strong>System Management Tools (e.g., ipmitool)</strong>: Know how to read fan speeds or set them via your hardware interface.</li> <li><strong>Linux Command Line Kung Fu</strong>: You don’t need to be a grandmaster, but some CLI familiarity never hurts.</li> <li><strong>A GPU in a Server</strong>: Preferably one that can handle a bit of experimental tinkering as you dial in those fan speeds.</li> </ul> <p><a href="https://flask.palletsprojects.com/en/stable/">Need a Python web framework refresher? Here’s a helpful Flask guide.</a></p> <h2 id="introduction"><strong>Introduction</strong></h2> <blockquote> <p><strong>The Big Chill</strong></p> <p>Picture this: You’ve got a GPU humming away inside your old faithful Dell PowerEdge R720—hardware that’s practically a fossil. Its default fan settings? Rudimentary at best. When the GPU gets hot, the fans go full throttle, threatening to turn your homelab into a wind tunnel. There’s no fancy vendor-provided fan curve, no quiet mode—just a binary choice between “whisper-quiet but toasty” or “cool but screaming like a banshee.”</p> </blockquote> <p>Enter <strong>Quiet Cool</strong>, a Python/Flask-based microservice that reads GPU temperatures, predicts optimal fan speeds with machine learning, and commands your fans like a serene maestro conducting a gentle breeze. You get temperature sanity and acoustic tranquility—no more wind-tunnel weekends.</p> <hr/> <h2 id="why-bother-the-problem--the-vision"><strong>Why Bother? The Problem &amp; The Vision</strong></h2> <h3 id="the-problem"><strong>The Problem</strong></h3> <p>Your server’s default fan logic is about as subtle as a sledgehammer. You’re either cooking your GPU or listening to a jet engine test run. Neither scenario is ideal.</p> <h3 id="the-vision"><strong>The Vision</strong></h3> <p>Quiet Cool serves as the missing link—a dynamic fan control system that fine-tunes fan speeds to keep your GPU within a comfortable thermal range without making your ears bleed. Think of it as your personal HVAC technician: it juggles temperature and noise constraints to find that sweet spot of equilibrium.</p> <hr/> <h2 id="architecture-overview-under-the-hood"><strong>Architecture Overview: Under the Hood</strong></h2> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ps-cv/assets/img/quietCool/diagram-480.webp 480w,/ps-cv/assets/img/quietCool/diagram-800.webp 800w,/ps-cv/assets/img/quietCool/diagram-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ps-cv/assets/img/quietCool/diagram.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Mechanisms" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Diagram of Adaptive Fan Speed Control: Balancing GPU Temperature and Noise with Machine Learning and Fallback Safety Mechanisms </div> <h3 id="diagram-breakdown-adaptive-fan-speed-control-logic"><strong>Diagram Breakdown: Adaptive Fan Speed Control Logic</strong></h3> <p>The system’s adaptive fan speed control mechanism is illustrated in the diagram below. This logic leverages real-time GPU temperature data, a machine learning-based prediction model, and fallback safety mechanisms to maintain thermal stability and acoustic optimization.</p> <h4 id="key-components-and-workflow"><strong>Key Components and Workflow</strong></h4> <ol> <li>GPU Machine: <ul> <li>Continuously monitors GPU temperatures and relays this data to the Fan Control Server via the sendGPUTemperature() function.</li> <li>Serves as the primary source of real-time environmental data.</li> </ul> </li> <li>Fan Control Server: <ul> <li>Operates as the brain of the system, processing temperature data and orchestrating fan speed commands.</li> <li>Implements two stages of control logic: <ul> <li>Initial Control Logic (useInitialControlLogic): Applied during the first 100 iterations to ensure basic safety and prevent overheating using predefined thresholds.</li> <li>Prediction-Based Logic (predictFanSpeed): Once sufficient data is gathered (after 100 iterations), the server predicts optimal fan speeds using a machine learning model and validates these predictions with validateFanSpeed() to ensure reliability.</li> </ul> </li> <li>Logs all temperature and fan speed data into Data Storage, enabling periodic model retraining for improved accuracy.</li> <li>Sends precise fan speed commands to the iDRAC module using sendFanSpeedCommand().</li> </ul> </li> <li>iDRAC Module: <ul> <li>Acts as an intermediary between the server and the physical fan hardware.</li> <li>Receives fan speed commands and executes them by instructing the Fans Module to adjust speeds via changeFanSpeed().</li> </ul> </li> <li>Fans Module: <ul> <li>Physically adjusts fan speeds to regulate the GPU’s temperature based on the commands received from iDRAC.</li> </ul> </li> <li>Data Storage: <ul> <li>Logs operational data (e.g., temperature, fan speed, predictions) for future analysis and continuous model improvement.</li> </ul> </li> </ol> <h4 id="safety-and-adaptability"><strong>Safety and Adaptability</strong></h4> <ol> <li>If the prediction-based logic fails validation or the iteration count is below 100, a fallback mechanism (useFallbackLogic()) ensures safe fan operations, preventing system instability.</li> <li>Machine learning models continuously adapt, balancing noise levels and thermal performance by learning from the recorded data.</li> </ol> <h3 id="1-flask-server--rest-api"><strong>1. Flask Server &amp; REST API</strong></h3> <p>A lightweight Flask server listens for GPU temperature updates. POST your GPU’s current temperature to <code class="language-plaintext highlighter-rouge">/gpu-temperature</code>, and the server responds with a recommended fan speed.</p> <h3 id="2-temperature-monitoring-script"><strong>2. Temperature Monitoring Script</strong></h3> <p>A shell script (<code class="language-plaintext highlighter-rouge">monitor_gpu_temp.sh</code>) runs on the machine hosting the GPU. Every 10 seconds or so, it checks the GPU temperature and posts it to the Flask server. It’s like a temperature courier, passing urgent “I’m hot” notes to the server.</p> <h3 id="3-initial-control-logic"><strong>3. Initial Control Logic</strong></h3> <p>Before machine learning enters the fray, we start simple with a piecewise function (old-fashioned if-then-else) to set fan speeds based on temperature thresholds. Under 40°C? Gentle breeze. Above 55°C? Kick it up. This baseline logic ensures we never fry the GPU while we gather training data for the ML model.</p> <h3 id="4-machine-learning-model"><strong>4. Machine Learning Model</strong></h3> <p>After collecting enough data from the baseline runs, we feed it into a machine learning model. This model predicts fan speeds and uses a custom loss function that penalizes excessive noise and unsafe temperatures. Over time, the model learns to keep the GPU cool without triggering hurricane-force fans.</p> <hr/> <h2 id="the-math--the-madness">The Math &amp; The Madness</h2> <h3 id="1-initial-control-logic"><strong>1. Initial Control Logic</strong></h3> <p>Before we involve machine learning, we rely on a piecewise (rule-based) approach to ensure the GPU doesn’t overheat while we collect data. For example:</p> \[F_{\text{init}}(T) = \begin{cases} 10\%, &amp; T &lt; 40^\circ\text{C}, \\[6pt] 30\%, &amp; 40^\circ\text{C} \le T &lt; 55^\circ\text{C}, \\[6pt] 50\%, &amp; T \ge 55^\circ\text{C} \end{cases}\] <p>This basic logic logs pairs of \((T_{\text{GPU}}, \text{fan_speed})\) . Those pairs become our initial training samples for the ML model.</p> <h3 id="2-moving-to-a-smarter-model"><strong>2. Moving to a Smarter Model</strong></h3> <p>We introduce a neural network that, given a temperature , predicts an <strong>optimal fan speed</strong>. However, “optimal” here also depends on noise constraints, so we must include noise and temperature considerations in our training objective (loss function). The network must learn that:</p> <ol> <li>Excessive fan speeds can mean high noise.</li> <li>Too-low fan speeds can mean high temperatures.</li> </ol> <p><strong>Key Insight</strong>: The final output of our neural network is not just a single fan speed. In the code example, we produce a 3-component vector $\bigl(s, n, t\bigr)$:</p> <ul> <li> <p>\(s\) = predicted fan speed,</p> </li> <li> <p>\(v\) = predicted noise level,</p> </li> <li> <p>\(n\) = predicted temperature,</p> </li> </ul> <p>so the network can self-consistently learn to balance these outputs.</p> <h3 id="3-modeling-noise-from-fan-speed"><strong>3. Modeling Noise From Fan Speed</strong></h3> <p>Noise often increases with fan RPM in a roughly logarithmic manner. If we know a reference noise level $N_0$ at reference \(RPM_0\) , we can approximate noise $N_1$ at \(RPM_1\) with:</p> \[N_1 \approx N_0 + K \cdot \log\!\Bigl(\frac{\text{RPM}_1}{\text{RPM}_0}\Bigr)\] <p>where \(K\) is some empirical constant derived from mechanical/fan acoustic data. This gives a <strong>differentiable</strong> function linking fan speed to noise. Over time, you can refine this model with real measurements of noise vs. RPM.</p> <p><strong>Note:</strong> If you can query actual RPM via IPMI (e.g., <code class="language-plaintext highlighter-rouge">ipmitool sensor | grep Fan</code>) and measure noise directly, you can fit a more accurate function. In practice, the model can treat the predicted fan speed (\(s\%\)) as proportional to \(RPM\) , or you can store actual readings for finer control.</p> <h3 id="4-modeling-temperature-from-fan-speed"><strong>4. Modeling Temperature From Fan Speed</strong></h3> <p>Temperature is trickier. Higher fan speeds improve cooling, but the relationship may be nonlinear, depending on system load, ambient temperature, etc. A simple approach:</p> <ol> <li>Collect data pairs \(\bigl(f, T_{\text{GPU}}\bigr)\)</li> <li>Fit a regression \(T(f)\) that, for a given fan speed \(f\) , estimates GPU temperature \(T_{GPU}\).</li> </ol> <p>Even a crude linear or polynomial model is better than nothing. As you gather more data, refine your temperature model.</p> <h3 id="5-neural-network-structure"><strong>5. Neural Network Structure</strong></h3> <ol> <li><strong>Inputs</strong>: GPU temperature $T$.</li> <li><strong>Hidden Layer</strong>: Dense layer (size 128, ReLU activation).</li> <li><strong>Outputs</strong>: A 3-component vector \(\bigl(s, n, t\bigr)\):</li> </ol> \[f(T) = \bigl(s,\,n,\,t\bigr)\] <ul> <li>\(s\) = predicted fan speed (as a percentage or a suitable scale).</li> <li>\(n\) = predicted noise level (dB).</li> <li>\(t\) = predicted temperature (°C).</li> </ul> <p>In pseudo-math form:</p> \[f(T)= W_2 \,\sigma\!\bigl(W_1 \,T + b_1\bigr) \cdot b_2\] <p>where $\sigma$ is the ReLU activation, and $W_1, b_1, W_2, b_2$  are trainable weights.</p> <h3 id="6-revised-custom-loss-function"><strong>6. Revised Custom Loss Function</strong></h3> <p>Our custom loss function must capture three things:</p> <ol> <li><strong>Fan Speed MSE</strong>: We compare the predicted fan speed to the <em>true/observed</em> fan speed \(\hat{s}\) (initially from the rule-based logic) to ensure continuity with past data:</li> </ol> \[\mathcal{L}_{\text{fan_speed}} = \frac{1}{N}\sum{i=1}^{N} \bigl(\hat{s}_i - s_i\bigr)^2\] <ol> <li><strong>Noise Penalty: We penalize noise beyond some threshold \(\text{NOISE_THRESHOLD}\) , e.g., 80 dB:</strong></li> </ol> \[\text{noise_penalty}_i = \begin{cases} \alpha_N \,\bigl(n_i - 80\bigr)^2, &amp; n_i &gt; 80,\\ 0, &amp; \text{otherwise} \end{cases}\] <p>This encourages predictions that keep noise under 80 dB.</p> <ol> <li><strong>Temperature Penalty: We penalize predicted temperatures above some safe threshold \(\text{TEMP_THRESHOLD}\) , e.g., 85°C:</strong></li> </ol> \[\text{temp_penalty}_i = \begin{cases} \alpha_T \,\bigl(t_i - 85\bigr)^2, &amp; t_i &gt; 85,\\ 0, &amp; \text{otherwise} \end{cases}\] <p>Putting it all together:</p> \[\mathcal{L} = \underbrace{\frac{1}{N}\sum_{i=1}^{N} (\hat{s}_i - s_i)^2}_{\text{fan_speed MSE}} \;+\; \frac{1}{N}\sum_{i=1}^{N}\Bigl[\text{noise_penalty}_i + \text{temp_penalty}_i\Bigr]\] <h3 id="7-fan-speed-decision-logic"><strong>7. Fan-Speed Decision Logic</strong></h3> <p>Even after training, we keep a fallback check. When a new temperature arrives:</p> <ol> <li><strong>Model Prediction</strong>: \(\bigl(s,\,n,\,t\bigr) = f(T)\)</li> <li><strong>Validity Check:</strong></li> </ol> <p><strong>We have a piecewise “safe range” for fan speed:</strong></p> \[\text{is_valid_fan_speed}(T, s)= \begin{cases}\text{True}, &amp; \text{if } T&lt;40 \implies 10\%\le s \le 30\%,\\\text{True}, &amp; \text{if } 40\le T&lt;50 \implies 30\%\le s \le 50\%,\\\dots &amp; \dots \\\text{False}, &amp; \text{otherwise}\end{cases}\] <p>If \(s\) is outside this range, revert to the simpler piecewise function \(F_{\text{init}}(T)\).</p> <ol> <li><strong>Set Fan Speed</strong>: Whichever final speed we settle on gets applied via IPMI.</li> </ol> <p><strong>Hence, the chosen fan speed is:</strong></p> \[F(t)= \begin{cases} s, &amp; \text{if is_valid_fan_speed}(T, s)=\text{True}\\ F{\text{init}}(T), &amp; \text{otherwise} \end{cases}\] <h3 id="8-periodic-retraining"><strong>8. Periodic Retraining</strong></h3> <ol> <li><strong>Data Collection</strong>: Each time we set a fan speed , we log:</li> </ol> \[\Bigl(T(t),\,F(t),\,\text{RPM}(t),\,\text{any noise measurements}\Bigr)\] <ol> <li><strong>Augment</strong>: Possibly estimate noise $\hat{n}(t)$ using the noise model, or measure it.</li> <li> <p><strong>Retrain Condition</strong>: Every time we accumulate, say, 10 new samples (or some threshold), we update the dataset \(\{(T_i, \hat{s}_i, \hat{n}_i, \hat{t}i)\}\) and retrain the network by minimizing:</p> \[\min_ \mathcal{L}\Bigl(\{f(T_i)\}, \{\hat{\mathbf{y}}_i\}\Bigr)\] </li> <li><strong>Iterate</strong>: Over time, the model learns more accurate temperature/noise relationships, refining predictions.</li> </ol> <h3 id="putting-it-all-together"><strong>Putting It All Together</strong></h3> <ol> <li><strong>Baseline</strong>: Use a simple piecewise fan-speed logic \(\bigl(F_{\text{init}}(T)\bigr)\) to gather initial data.</li> <li><strong>Train</strong> a neural network that outputs with a custom loss balancing fan-speed accuracy, noise penalty, and temperature penalty.</li> <li><strong>Runtime</strong>: For each new GPU temperature:</li> <li>Predict \(\bigl(s, n, t\bigr) = f(T)\).</li> <li>Validate $s$ via <code class="language-plaintext highlighter-rouge">is_valid_fan_speed()</code>.</li> <li>Either accept $s$ or fallback to the piecewise rule.</li> <li>Log data; periodically retrain.</li> </ol> <p>This architecture ensures we keep the system safe (by falling back if predictions go wild) while gradually shifting control toward an ML-driven approach. Over enough iterations, you get a <strong>data-informed fan-speed controller</strong> that strikes an improved balance between <strong>noise</strong> and <strong>temperature</strong> compared to naive, fixed thresholds.</p> <h2 id="implementation-details"><strong>Implementation Details</strong></h2> <h3 id="training-procedure"><strong>Training Procedure</strong></h3> <ol> <li><strong>Data Collection</strong>: Run the baseline piecewise logic for a while, logging (temperature, fan speed, RPM) samples. Estimate noise from RPM using the given formula and store these values.</li> <li><strong>Modeling Functions</strong>: Fit functions for \(T(f_{\text{pred}})\) and \(N(f_{\text{pred}})\). Even a simple regression can serve as a starting point.</li> <li><strong>Integrate into Loss</strong>: Implement the custom loss function, ensuring \(T(f_{\text{pred}})\) and \(N(f_{\text{pred}})\) are differentiable with respect to model parameters (if using a neural net, for example).</li> <li><strong>Train the Model</strong>: Use gradient-based optimization to minimize the combined loss. Over iterations, the model learns to set fan speeds that strike a better balance than the naive piecewise logic.</li> </ol> <hr/> <blockquote> <h5 id="disclaimer-experimental-territory"><strong>Disclaimer Experimental Territory</strong></h5> <p class="block-warning">No warranties, no promises. If your fan control goes haywire or your GPU gets too toasty, remember this is all very much a DIY affair. Monitor closely, test slowly, and proceed at your own risk.</p> </blockquote> <hr/> <h2 id="setting-it-up-from-git-clone-to-gentle-breeze"><strong>Setting It Up: From Git Clone to Gentle Breeze</strong></h2> <h3 id="1-clone-the-repo--setup-environment"><strong>1. Clone the Repo &amp; Setup Environment</strong></h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/yourusername/quiet-cool.git
<span class="nb">cd </span>quiet-cool
python3 <span class="nt">-m</span> venv venv
<span class="nb">source </span>venv/bin/activate
pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
</code></pre></div></div> <h3 id="2-run-the-server"><strong>2. Run the Server</strong></h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python fan_control_server.py
</code></pre></div></div> <h3 id="3-monitor-gpu-temp--post-data"><strong>3. Monitor GPU Temp &amp; Post Data</strong></h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./monitor_gpu_temp.sh
</code></pre></div></div> <hr/> <h2 id="source-code">Source Code:</h2> <h3 id="1-monitor_gpu_tempsh"><strong>1. monitor_gpu_temp.sh</strong></h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># monitor_gpu_temp.sh: Script to monitor GPU temperature and send it to a remote machine</span>

<span class="nv">REMOTE_ADDRESS</span><span class="o">=</span><span class="s2">"http://your_flask_server:23333"</span>  <span class="c"># Replace with your remote machine's address</span>

get_gpu_temp<span class="o">()</span> <span class="o">{</span>
    nvidia-smi <span class="nt">--query-gpu</span><span class="o">=</span>temperature.gpu <span class="nt">--format</span><span class="o">=</span>csv,noheader,nounits
<span class="o">}</span>

<span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">TEMP</span><span class="o">=</span><span class="si">$(</span>get_gpu_temp<span class="si">)</span>
    <span class="nb">echo</span> <span class="s2">"GPU Temperature: </span><span class="nv">$TEMP</span><span class="s2">°C"</span>
    curl <span class="nt">-X</span> POST <span class="nt">-d</span> <span class="s2">"temperature=</span><span class="nv">$TEMP</span><span class="s2">"</span> <span class="nv">$REMOTE_ADDRESS</span>/gpu-temperature
    <span class="nb">sleep </span>10
<span class="k">done</span>
</code></pre></div></div> <h3 id="2-fan_control_serverpy"><strong>2. fan_control_server.py</strong></h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">logging</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">pickle</span>
<span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span><span class="p">,</span> <span class="n">request</span>
<span class="kn">from</span> <span class="n">tensorflow.keras.models</span> <span class="kn">import</span> <span class="n">load_model</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>


<span class="n">IP_ADDRESS</span> <span class="o">=</span> <span class="sh">"</span><span class="s">10.10.10.10</span><span class="sh">"</span>  <span class="c1"># Replace with your iDrac address
</span><span class="n">USERNAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">idaracusername</span><span class="sh">"</span>             <span class="c1"># Replace with your username
</span><span class="n">PASSWORD</span> <span class="o">=</span> <span class="sh">"</span><span class="s">idracpassword</span><span class="sh">"</span>           <span class="c1"># Replace with your password
</span>
<span class="c1"># Configuration files or environment variables should be used for these settings
</span><span class="n">DATA_FILE</span> <span class="o">=</span> <span class="sh">'</span><span class="s">gpu_fan_data.csv</span><span class="sh">'</span>
<span class="n">MODEL_FILE</span> <span class="o">=</span> <span class="sh">'</span><span class="s">fan_speed_model.h5</span><span class="sh">'</span>
<span class="n">LOG_FILE</span> <span class="o">=</span> <span class="sh">'</span><span class="s">training.log</span><span class="sh">'</span>
<span class="n">ITERATION_FILE</span> <span class="o">=</span> <span class="sh">'</span><span class="s">iteration_count.pkl</span><span class="sh">'</span>

<span class="n">model</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">training_status</span> <span class="o">=</span> <span class="sh">"</span><span class="s">No training done yet</span><span class="sh">"</span>
<span class="n">iteration_count</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1"># Logging configuration
</span><span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="sh">'</span><span class="s">%(asctime)s %(levelname)s: %(message)s</span><span class="sh">'</span><span class="p">,</span> <span class="n">handlers</span><span class="o">=</span><span class="p">[</span>
    <span class="n">logging</span><span class="p">.</span><span class="nc">FileHandler</span><span class="p">(</span><span class="n">LOG_FILE</span><span class="p">),</span>
    <span class="n">logging</span><span class="p">.</span><span class="nc">StreamHandler</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">)</span>
<span class="p">])</span>

<span class="c1"># Custom loss function
</span><span class="k">def</span> <span class="nf">custom_loss</span><span class="p">(</span><span class="n">y_true</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">):</span>
    <span class="n">NOISE_THRESHOLD</span> <span class="o">=</span> <span class="mf">80.0</span>
    <span class="n">TEMP_THRESHOLD</span> <span class="o">=</span> <span class="mf">85.0</span>
    <span class="n">NOISE_PENALTY</span> <span class="o">=</span> <span class="mf">10.0</span>
    <span class="n">TEMP_PENALTY</span> <span class="o">=</span> <span class="mf">20.0</span>

    <span class="n">fan_speed_loss</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">reduce_mean</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">y_true</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">y_pred</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]))</span>
    <span class="n">noise_penalty</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">y_pred</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">NOISE_THRESHOLD</span><span class="p">,</span> <span class="n">NOISE_PENALTY</span> <span class="o">*</span> <span class="n">tf</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">y_pred</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">NOISE_THRESHOLD</span><span class="p">),</span> <span class="mf">0.0</span><span class="p">)</span>
    <span class="n">temp_penalty</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="n">y_pred</span><span class="p">[:,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">TEMP_THRESHOLD</span><span class="p">,</span> <span class="n">TEMP_PENALTY</span> <span class="o">*</span> <span class="n">tf</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">y_pred</span><span class="p">[:,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="n">TEMP_THRESHOLD</span><span class="p">),</span> <span class="mf">0.0</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">fan_speed_loss</span> <span class="o">+</span> <span class="n">tf</span><span class="p">.</span><span class="nf">reduce_mean</span><span class="p">(</span><span class="n">noise_penalty</span> <span class="o">+</span> <span class="n">temp_penalty</span><span class="p">)</span>

<span class="c1"># Build model
</span><span class="k">def</span> <span class="nf">build_model</span><span class="p">(</span><span class="n">input_shape</span><span class="p">):</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">([</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="n">input_shape</span><span class="p">,)),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="p">])</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="sh">'</span><span class="s">adam</span><span class="sh">'</span><span class="p">,</span> <span class="n">loss</span><span class="o">=</span><span class="n">custom_loss</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">model</span>

<span class="c1"># Load model if available
</span><span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">MODEL_FILE</span><span class="p">)</span> <span class="ow">and</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getsize</span><span class="p">(</span><span class="n">MODEL_FILE</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="nf">load_model</span><span class="p">(</span><span class="n">MODEL_FILE</span><span class="p">,</span> <span class="n">custom_objects</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">custom_loss</span><span class="sh">'</span><span class="p">:</span> <span class="n">custom_loss</span><span class="p">})</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error loading model: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Load data
</span><span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">DATA_FILE</span><span class="p">)</span> <span class="ow">and</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getsize</span><span class="p">(</span><span class="n">DATA_FILE</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">DATA_FILE</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error loading data: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">temperature</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">fan_speed</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">noise_level</span><span class="sh">'</span><span class="p">])</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">temperature</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">fan_speed</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">noise_level</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># Load iteration count
</span><span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">ITERATION_FILE</span><span class="p">)</span> <span class="ow">and</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getsize</span><span class="p">(</span><span class="n">ITERATION_FILE</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">ITERATION_FILE</span><span class="p">,</span> <span class="sh">'</span><span class="s">rb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">iteration_file</span><span class="p">:</span>
            <span class="n">iteration_count</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">iteration_file</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error loading iteration count: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Train model function
</span><span class="k">def</span> <span class="nf">train_model</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">model</span><span class="p">,</span> <span class="n">training_status</span><span class="p">,</span> <span class="n">data</span>
    <span class="n">training_status</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Training in progress</span><span class="sh">"</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="n">training_status</span><span class="p">)</span>

    <span class="n">X</span> <span class="o">=</span> <span class="n">data</span><span class="p">[[</span><span class="sh">'</span><span class="s">temperature</span><span class="sh">'</span><span class="p">]].</span><span class="n">values</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">data</span><span class="p">[[</span><span class="sh">'</span><span class="s">fan_speed</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">noise_level</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">temperature</span><span class="sh">'</span><span class="p">]].</span><span class="n">values</span>

    <span class="k">if</span> <span class="n">model</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="nf">build_model</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">MODEL_FILE</span><span class="p">)</span>
    <span class="n">training_status</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Training completed successfully</span><span class="sh">"</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="n">training_status</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">set_fan_speed</span><span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="n">speed</span><span class="p">):</span>
    <span class="c1"># Convert the speed to a two-digit hexadecimal string
</span>    <span class="n">hex_speed</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">speed</span><span class="si">:</span><span class="mi">02</span><span class="n">x</span><span class="si">}</span><span class="sh">"</span>

    <span class="c1"># Create the command
</span>    <span class="n">command</span> <span class="o">=</span> <span class="p">[</span>
        <span class="sh">"</span><span class="s">ipmitool</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">-I</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lanplus</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">-H</span><span class="sh">"</span><span class="p">,</span> <span class="n">config</span><span class="p">[</span><span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">],</span>
        <span class="sh">"</span><span class="s">-U</span><span class="sh">"</span><span class="p">,</span> <span class="n">config</span><span class="p">[</span><span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">],</span>
        <span class="sh">"</span><span class="s">-P</span><span class="sh">"</span><span class="p">,</span> <span class="n">config</span><span class="p">[</span><span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">],</span>
        <span class="sh">"</span><span class="s">raw</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">0x30</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0x30</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0x02</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0xff</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">0x</span><span class="si">{</span><span class="n">hex_speed</span><span class="si">}</span><span class="sh">"</span>
    <span class="p">]</span>

    <span class="c1"># Execute the command
</span>    <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">check</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Fan speed set to </span><span class="si">{</span><span class="n">speed</span><span class="si">}</span><span class="s">%</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Fan speed set to </span><span class="si">{</span><span class="n">speed</span><span class="si">}</span><span class="s">%</span><span class="sh">"</span><span class="p">)</span>


<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/gpu-temperature</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">gpu_temperature</span><span class="p">():</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">[</span><span class="sh">'</span><span class="s">temperature</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Received GPU Temperature: </span><span class="si">{</span><span class="n">temp</span><span class="si">}</span><span class="s">°C</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">global</span> <span class="n">model</span><span class="p">,</span> <span class="n">iteration_count</span>
    <span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">address</span><span class="sh">"</span><span class="p">:</span> <span class="n">IP_ADDRESS</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">:</span> <span class="n">USERNAME</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">:</span> <span class="n">PASSWORD</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">model</span><span class="p">:</span>
        <span class="c1"># Predict the fan speed using the model
</span>        <span class="n">predicted_speed</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="n">temp</span><span class="p">]]))[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">fan_speed</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">predicted_speed</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">is_valid_fan_speed</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="n">fan_speed</span><span class="p">):</span>
            <span class="n">fan_speed</span> <span class="o">=</span> <span class="nf">initial_control_logic</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">fan_speed</span> <span class="o">=</span> <span class="nf">initial_control_logic</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>

    <span class="c1"># Set fan speed
</span>    <span class="nf">set_fan_speed</span><span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="n">fan_speed</span><span class="p">)</span>

    <span class="c1"># Collect and save data
</span>    <span class="n">new_data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">timestamp</span><span class="sh">'</span><span class="p">:</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">(),</span> <span class="sh">'</span><span class="s">temperature</span><span class="sh">'</span><span class="p">:</span> <span class="n">temp</span><span class="p">,</span> <span class="sh">'</span><span class="s">fan_speed</span><span class="sh">'</span><span class="p">:</span> <span class="n">fan_speed</span><span class="p">}</span>
    <span class="k">global</span> <span class="n">data</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">([</span><span class="n">data</span><span class="p">,</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">([</span><span class="n">new_data</span><span class="p">])],</span> <span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">data</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="n">DATA_FILE</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">logging</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Data saved: </span><span class="si">{</span><span class="n">new_data</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># Train model periodically
</span>    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">10</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="nf">train_model</span><span class="p">()</span>

    <span class="k">return</span> <span class="sh">"</span><span class="s">OK</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">initial_control_logic</span><span class="p">(</span><span class="n">temp</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="mi">40</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">10</span>
    <span class="k">elif</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">30</span>
    <span class="k">elif</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="mi">60</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">50</span>
    <span class="k">elif</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="mi">70</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">70</span>
    <span class="k">elif</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="mi">80</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">80</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">100</span>

<span class="k">def</span> <span class="nf">is_valid_fan_speed</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="n">fan_speed</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="mi">40</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">10</span> <span class="o">&lt;=</span> <span class="n">fan_speed</span> <span class="o">&lt;=</span> <span class="mi">30</span>
    <span class="k">elif</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">30</span> <span class="o">&lt;=</span> <span class="n">fan_speed</span> <span class="o">&lt;=</span> <span class="mi">50</span>
    <span class="k">elif</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="mi">60</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">50</span> <span class="o">&lt;=</span> <span class="n">fan_speed</span> <span class="o">&lt;=</span> <span class="mi">70</span>
    <span class="k">elif</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="mi">70</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">70</span> <span class="o">&lt;=</span> <span class="n">fan_speed</span> <span class="o">&lt;=</span> <span class="mi">80</span>
    <span class="k">elif</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="mi">80</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">80</span> <span class="o">&lt;=</span> <span class="n">fan_speed</span> <span class="o">&lt;=</span> <span class="mi">90</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">90</span> <span class="o">&lt;=</span> <span class="n">fan_speed</span> <span class="o">&lt;=</span> <span class="mi">100</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="sh">'</span><span class="s">0.0.0.0</span><span class="sh">'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">23333</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error starting Flask app: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">raise</span>
</code></pre></div></div> <h2 id="limitations--future-directions"><strong>Limitations &amp; Future Directions</strong></h2> <ul> <li>Improved Modeling: Current noise and temperature models are approximations. Future work could involve more accurate acoustic measurements and detailed thermal models.</li> <li>User Modes &amp; GUIs: In the future, imagine a web interface letting you toggle “Quiet Mode” or “Performance Mode.”</li> <li>Hardware Compatibility: For now, tested on a Dell PowerEdge R720. With refinements, we could support a wide range of hardware, or even integrate sensor fusion from multiple data points.</li> </ul>]]></content><author><name></name></author><category term="Machine"/><category term="Learning"/><category term="code"/><category term="IoT"/><category term="ML"/><summary type="html"><![CDATA[Charge Grandpa's Machine w/ Artificial Neural Network]]></summary></entry><entry><title type="html">Monitor Your Homelab Using Grafana + Prometheus</title><link href="https://tingrubato.github.io/ps-cv/blog/2024/observability/" rel="alternate" type="text/html" title="Monitor Your Homelab Using Grafana + Prometheus"/><published>2024-04-01T15:06:00+00:00</published><updated>2024-04-01T15:06:00+00:00</updated><id>https://tingrubato.github.io/ps-cv/blog/2024/observability</id><content type="html" xml:base="https://tingrubato.github.io/ps-cv/blog/2024/observability/"><![CDATA[<h2 id="prelude-tired-of-bi-tools-try-grafana">Prelude: Tired of BI Tools? Try Grafana!</h2> <p>Are you fed up with the same old BI tools like Tableau and PowerBI? Then, welcome to the Grafana fan club—a refreshing twist in the world of analytics and monitoring! Grafana isn’t just any platform; it’s an open-source wonder that lets you query, visualize, alert on, and understand your metrics, no matter their hiding spots. Dive into creating, exploring, and sharing dashboards that not only look cool but also make you the hero of data-driven decision-making. Here’s why Grafana stands out from the crowd:</p> <ul> <li> <p><strong>Open Source Magic</strong>: Wave goodbye to those pricey subscriptions! Grafana is open-source, meaning you can keep your wallet happy and your data happier. And let’s be honest, in the world of UI/UX design, Tableau still feels like it’s using a map to find the ‘start’ button.</p> </li> <li> <p><strong>Community Strength</strong>: Ever feel lonely in the data jungle? Not with Grafana! Join a community brimming with enthusiasts eager to lend a hand, share a plugin, or offer a data-driven shoulder to cry on.</p> </li> <li> <p><strong>Plugin Paradise</strong>: Need more bells and whistles? Grafana’s robust library of plugins is like a Swiss Army knife for your data—always ready to extend your capabilities.</p> </li> <li> <p><strong>Diverse Data Sources</strong>: Whether it’s Graphite, Prometheus, InfluxDB, or Elasticsearch, Grafana speaks fluent data from nearly any source you can throw at it.</p> </li> <li> <p><strong>Alert Like a Pro</strong>: With Grafana’s sophisticated alerting system, you can set alerts that make even the most stoic data sit up and take notice.</p> </li> </ul> <p>Ready to break up with your old BI tools? Grafana is your new data-soulmate waiting to sweep you off your feet!</p> <h2 id="grafana-a-journey-from-zero-to-hero">Grafana: A Journey From Zero to Hero</h2> <p>Aight folks, let’s start preparing for the Grafana journey. We’ll be covering the following topics:</p> <ul> <li><strong>Getting Started</strong>: Installation, setup, and configuration of Grafana.</li> <li><strong>Data Sources</strong>: Connecting Grafana to various data sources.</li> <li><strong>Dashboards</strong>: Creating and customizing dashboards.</li> <li><strong>Plugins</strong>: Extending Grafana’s functionality with plugins.</li> <li><strong>Alerting</strong>: Setting up alerts for your data.</li> </ul> <h4 id="getting-started">Getting Started</h4> <p>Grafana is a breeze to install and set up. You can choose from various installation methods, including Docker, RPM/DEB packages, and even cloud services like AWS and Azure. Once you’ve installed Grafana, you can access it via your browser and start configuring it to your heart’s content. Here is a quick guide to get you started: <a href="https://grafana.com/docs/grafana/latest/installation/">Grafana Installation Guide</a>.<strong>If you are really in a hurry and want to get started right away before reading the installation guide, you can use the following Docker command to get Grafana up and running: <code class="language-plaintext highlighter-rouge">docker run -d -p 3000:3000 grafana/grafana</code>.</strong> After running this command, you can access Grafana by navigating to <code class="language-plaintext highlighter-rouge">http://localhost:3000</code> in your browser.</p> <p>If you set up Grafana successfully, you should see the login page as shown below:</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ps-cv/assets/img/grafana/Login-480.webp 480w,/ps-cv/assets/img/grafana/Login-800.webp 800w,/ps-cv/assets/img/grafana/Login-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ps-cv/assets/img/grafana/Login.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Grafana Login Page" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Grafana Login Page </div> <p>What? are you asking me for the default username and password? Well, I don’t want to spoil the fun for you. Go ahead and find it out yourself. If you still can’t find it, you can always refer to the <a href="https://grafana.com/docs/grafana/latest/installation/">Grafana documentation</a> or leave me a comment below and I will teach you hands-on.</p> <h3 id="data-sources">Data Sources</h3> <p>Grafana supports a wide range of data sources, including Graphite, Prometheus, InfluxDB, Elasticsearch, and many more. You can easily connect Grafana to these data sources by configuring the data source settings in Grafana. Here is a quick guide to help you get started: <a href="https://grafana.com/docs/grafana/latest/features/datasources/">Grafana Data Sources Guide</a>.</p> <ul> <li><strong>How to Add a Data Source</strong>: To add a data source, navigate to the Configuration &gt; Data Sources page in Grafana and click on the “Add data source” button as shown in the image below.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ps-cv/assets/img/grafana/datasource-480.webp 480w,/ps-cv/assets/img/grafana/datasource-800.webp 800w,/ps-cv/assets/img/grafana/datasource-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ps-cv/assets/img/grafana/datasource.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Add Data Source" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Add Data Source </div> <ul> <li>Select the data source you want to add, configure the data source settings, and click on the “Save &amp; Test” button to save the data source settings. Grafana actually provides a lot of options to configure the data source settings, so make sure to explore them to get the most out of your data source. Here in this example we will be using Prometheus as our data source. <strong>Note</strong>: Here we assume that you have correctly set up Prometheus and it is running on your local machine. If you haven’t set up Prometheus yet, you can refer to the <a href="https://prometheus.io/docs/prometheus/latest/getting_started/">Prometheus documentation</a> to get started.</li> <li>But wait, why do we need Prometheus as our data source? Well, Prometheus is a popular monitoring and alerting tool that is widely used in the industry. It is a great choice for monitoring your applications and infrastructure, and Grafana provides excellent support for Prometheus. So, since our topic is to cover how you can set up grafana for monitoring your server metrics, we will be using Prometheus as our data source. In the image below, you can see how we have configured Prometheus as our data source in Grafana. Since we are running Prometheus on our local machine, we’ll just skip the TLS/SSL settings and click on the “Save &amp; Test” button to save the data source settings as shown in the image below. I really like the way Grafana provides a test button to test the data source settings. It makes it easy to verify if the data source is correctly configured or not.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ps-cv/assets/img/grafana/saveandtest-480.webp 480w,/ps-cv/assets/img/grafana/saveandtest-800.webp 800w,/ps-cv/assets/img/grafana/saveandtest-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ps-cv/assets/img/grafana/saveandtest.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Save and Test Data Source" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Save and Test Data Source </div> <h3 id="dashboards">Dashboards</h3> <p>Dashboards are the heart and soul of Grafana. They allow you to visualize your data in a meaningful way and gain insights from it. You can create custom dashboards in Grafana by adding panels that display your data in various formats like graphs, tables, and gauges. Here is a quick guide to help you get started: <a href="https://grafana.com/docs/grafana/latest/features/dashboard/dashboards/">Grafana Dashboards Guide</a>.</p> <ul> <li><strong>How to Create a Dashboard</strong>: To create a dashboard, navigate to the Create &gt; Dashboard page in Grafana and click on the “Add new panel” button as shown in the image below.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ps-cv/assets/img/grafana/dashboard-480.webp 480w,/ps-cv/assets/img/grafana/dashboard-800.webp 800w,/ps-cv/assets/img/grafana/dashboard-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ps-cv/assets/img/grafana/dashboard.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Add New Panel" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Add New Panel </div> <ul> <li><strong>How to Use a Pre-built Dashboard</strong>: Grafana also provides a library of pre-built dashboards that you can use to monitor your data. You can import these dashboards into Grafana by navigating to the Create &gt; Dashboard page and clicking on the “Import” button as shown in the image below. You can then upload the JSON file into the text area and click on the “Load” button to import the dashboard. If you have the dashboard ID, you can also import the dashboard by navigating to the Create &gt; Dashboard page and clicking on the “Import” button as shown in the image below. You can then enter the dashboard id in the text area and click on the “Load” button to import the dashboard. In the image below, you can see how we have imported a pre-built dashboard into Grafana.</li> <li><strong>After Creating a Dashboard</strong>: Once you have created a dashboard, you can customize it by adding panels, changing the layout, and configuring the panel settings. You can also share the dashboard with others by exporting it as a JSON file or embedding it in a web page. In the image below, you can see how we have customized a dashboard in Grafana. This is an example of a dashboard that displays server metrics collected by Prometheus from PVE Exporter. This is used to monitor my home server and keep an eye on the server metrics like CPU usage, memory usage, disk usage, and network traffic. (To Dell: If you could have just provide user with a better ipmi tool, I wouldn’t have to use PVE Exporter to monitor my server. But anyways, I am happy with the setup now.)</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ps-cv/assets/img/grafana/pve-grafana-480.webp 480w,/ps-cv/assets/img/grafana/pve-grafana-800.webp 800w,/ps-cv/assets/img/grafana/pve-grafana-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ps-cv/assets/img/grafana/pve-grafana.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Proxmox Server Metric Monitoring Dashboard" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Proxmox Server Metric Monitoring Dashboard </div> <p>In the example above, you can easily see the metric values like CPU usage, memory usage, disk usage, and network traffic. By looking at the dashboard, I can easily tell that the Memory Usage of my qemu/109 is quite high. As a DevOp, you better know what to do when you come across this situation. I would log into the guest machine and pull out the memory usage of the processes running on the machine to identify the culprit. Well I can guarantee you that I don’t have culprit or malware running on my machine. It’s just that I had too much stuff stored in the Disk and Synology DSM was probably doing some background cleaning and sorting tasks.</p> <p>Now that you have a basic understanding of how to create and customize dashboards in Grafana, you can start exploring the various features and options available in Grafana to create stunning visualizations of your data. Remember, the sky’s the limit when it comes to Grafana dashboards!</p> <h2 id="prometheus-from-raw-metrics-to-symphony-of-insights">Prometheus: From Raw Metrics to Symphony of Insights</h2> <p>You might wonder why it sounds so easy to set up a Grafana Dashboard. Well, the secret sauce behind this is Prometheus. Prometheus is an open-source monitoring and alerting toolkit that is widely used in the industry. It provides a powerful data model, a flexible query language, and a sophisticated alerting system that makes it easy to monitor your applications and infrastructure. Prometheus collects metrics from your applications and infrastructure and stores them in a time-series database. You can then query these metrics using the Prometheus query language and visualize them in Grafana. This is why Prometheus is a great choice for monitoring your server metrics and Grafana is a great choice for visualizing these metrics. Together, they make a powerful combination that can help you monitor and troubleshoot your applications and infrastructure with ease. And I gotta be honest with you that it took me a while to properly set up Prometheus and PVE Exporter to monitor my Proxmox server. If you come across any issues while setting up Prometheus, here is a hint: <strong>Check the certificates and user permission.</strong> I know this sounds like a generic hint, but trust me, it can save you a lot of time.</p> <p>But in order to monitor your server metrics, there are a few additional set up that you need to do. You need to install Prometheus on your server and <strong>configure it</strong> to collect metrics from your applications and infrastructure. How to do that? Well, you can refer to the <a href="https://prometheus.io/docs/prometheus/latest/getting_started/">Prometheus documentation</a> to get started. Or you can follow this GitHub Repo <a href="https://github.com/prometheus-pve/prometheus-pve-exporter">Prometheus-PVE-Exporter</a>. These tutorials will guide you through the process of installing Prometheus on your server and configuring it to collect metrics from your applications and infrastructure. Once you have Prometheus set up and running, you can configure Grafana to connect to Prometheus and start visualizing your server metrics. And that’s how you can set up Grafana for monitoring your server metrics using Prometheus. This is specifically useful for monitoring your Proxmox server metrics. Below is my Prometheus configurations for monitoring my Proxmox server metrics. You can see that I have configured Prometheus to scrape the metrics from PVE Exporter, which is running on my Proxmox server. This is how Prometheus collects the metrics from my Proxmox server and stores them in a time-series database. You can then query these metrics using the Prometheus query language and visualize them in Grafana. This is how I monitor my Proxmox server metrics using Grafana and Prometheus. If you have any questions or need help setting up Prometheus and Grafana for monitoring your server metrics, feel free to leave me a comment below. I’ll be happy to help you out.</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">global</span><span class="pi">:</span>
  <span class="na">scrape_interval</span><span class="pi">:</span> <span class="s">15s</span> <span class="c1"># Set this wisely because it will affect the performance of your server.</span>
  <span class="na">evaluation_interval</span><span class="pi">:</span> <span class="s">15s</span> <span class="c1"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>
  <span class="c1"># scrape_timeout is set to the global default (10s).</span>

<span class="c1"># Alertmanager configuration</span>
<span class="na">alerting</span><span class="pi">:</span>
  <span class="na">alertmanagers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">static_configs</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span>
          <span class="c1"># - alertmanager:9093</span>

<span class="na">rule_files</span><span class="pi">:</span>
  <span class="c1"># - "first_rules.yml" This is where you can define your rule files. I would recommend you to keep your rules in a separate file and include them here. Since I am don't have a sophisticated setup, I have kept my rules in the same file.</span>
  <span class="c1"># - "second_rules.yml"</span>
<span class="na">scrape_configs</span><span class="pi">:</span>
  <span class="c1"># Job No. 1: Scrape the Prometheus server itself.</span>
  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">prometheus"</span>
    <span class="na">static_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">localhost:9090"</span><span class="pi">]</span>
  <span class="c1"># Job No. 2: Scrape the Proxmox server metrics using PVE Exporter.</span>
  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">pve"</span>
    <span class="na">static_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">pve.you-do-not-have-permission.ts.net</span> <span class="c1"># Proxmox host. You can replace this with your Proxmox VE host. Since I am using Tailscale, I have used the hostname provided by Tailscale.</span>
    <span class="na">metrics_path</span><span class="pi">:</span> <span class="s">/pve</span>
    <span class="na">scheme</span><span class="pi">:</span> <span class="s2">"</span><span class="s">https"</span>
    <span class="na">params</span><span class="pi">:</span>
      <span class="na">module</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">default</span><span class="pi">]</span>
    <span class="na">relabel_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">source_labels</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">__address__</span><span class="pi">]</span>
        <span class="na">target_label</span><span class="pi">:</span> <span class="s">__param_target</span>
      <span class="pi">-</span> <span class="na">source_labels</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">__param_target</span><span class="pi">]</span>
        <span class="na">target_label</span><span class="pi">:</span> <span class="s">instance</span>
      <span class="pi">-</span> <span class="na">target_label</span><span class="pi">:</span> <span class="s">__address__</span>
        <span class="na">replacement</span><span class="pi">:</span> <span class="s">portainer.stonecat-duck.ts.net:9221</span> <span class="c1"># PVE Exporter host. You can replace this with your PVE Exporter host. This is the port that PVE Exporter is running on.</span>

    <span class="c1"># Job No. 3: Scrape the Traefik metrics using Traefik Exporter.</span>
  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">traefik"</span>
    <span class="na">scrape_interval</span><span class="pi">:</span> <span class="s">15s</span>
    <span class="na">scrape_timeout</span><span class="pi">:</span> <span class="s">10s</span>
    <span class="na">metrics_path</span><span class="pi">:</span> <span class="s">/metrics</span>
    <span class="na">scheme</span><span class="pi">:</span> <span class="s">http</span>
    <span class="na">static_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">another-service:$PORT</span><span class="nv"> </span><span class="s">NUMBER"</span><span class="pi">]</span> <span class="c1"># Traefik host. You can replace this with your Traefik host.</span>
    <span class="na">basic_auth</span><span class="pi">:</span> <span class="c1"># Basic authentication. You can replace this with your basic authentication credentials. Not advised to use basic authentication. Use a more secure method but here I am running all of the service in local network and I am the only user, I will just skip the security part.</span>
      <span class="na">username</span><span class="pi">:</span> <span class="s">username-for-real</span>
      <span class="na">password</span><span class="pi">:</span> <span class="s">nobody-should-know-this</span>
    <span class="c1"># Job No. 4: Scrape the Nvidia GPU metrics using Nvidia GPU Exporter.</span>
  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Tesla</span><span class="nv"> </span><span class="s">M40"</span>
    <span class="na">static_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">your-gpu-host:9835"</span><span class="pi">]</span> <span class="c1"># Nvidia GPU host. You can replace this with your Nvidia GPU host. This is the port that Nvidia GPU Exporter is running on. Make sure this is the correct address and port. Here I was running the Nvidia GPU Exporter on my Nvidia GPU host which is not the same as my PVE Exporter host.</span>
</code></pre></div></div> <p>You probably need to tweak the configurations according to your setup. But this is how I have set up Prometheus to scrape the metrics from my Proxmox server using PVE Exporter. As I am using Docker, all I need to do is to mount the configuration file to the Prometheus container and start the container. Below is the docker-compose.yml file that I used to start the Prometheus container. <strong>It Only Contained the Prometheus Service. I have other services running as well. So Tweak it based on your need.</strong></p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.8"</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">prometheus-data</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">prometheus</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">prom/prometheus:latest</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">prometheus</span>
    <span class="na">hostname</span><span class="pi">:</span> <span class="s">prometheus</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">monitoring_network</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">traefik.enable=true"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">traefik.http.routers.prometheus.rule=Host(`portainer.stonecat-duck.ts.net`)&amp;&amp;PathPrefix(`/prometheus`)"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">traefik.http.services.prometheus.loadbalancer.server.port=9090"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">traefik.http.routers.prometheus.entrypoints=web"</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9090:9090"</span> <span class="c1"># You may use other ports as well. I have used 9090 because it is the default port for Prometheus.</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">/root/prometheus/config:/etc/prometheus/config</span> <span class="c1">#This is where I have stored my Prometheus configuration file. You can replace this with your configuration file path. Incorrect configuration file path will result in an error. The behavior of Prometheus is to not able to scrape the metrics from the target.</span>
      <span class="pi">-</span> <span class="s">/root/tsCert/:/etc/prometheus/cert/</span> <span class="c1">#This is where I have stored my certificates. You can replace this with your certificate path. Incorrect certificate path will result in an error. The behavior of Prometheus is to not able to scrape the metrics from the target.</span>
      <span class="pi">-</span> <span class="s">prometheus-data:/prometheus</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">command</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">--config.file=/etc/prometheus/config/prometheus.yml"</span> <span class="c1"># The container need to know where the configuration file is stored. This is the path to the configuration file. Make sure this is the correct_path in your container not your host machine.</span>
  <span class="c1">#Something Else Here</span>
<span class="na">networks</span><span class="pi">:</span>
  <span class="na">traefik_network</span><span class="pi">:</span>
    <span class="na">external</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="na">monitoring_network</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">bridge</span>
</code></pre></div></div> <p>By properly setting up Prometheus and Grafana, you can monitor your server metrics with ease and gain valuable insights into the performance of your applications and infrastructure. We can go to the Prometheus WEBUI and see the metrics that Prometheus is scraping from the target. This is how you can monitor your server metrics using Grafana and Prometheus. Below is a screenshot of my Prometheus target page. As you can see currently every tartget that I monitor is up. If you see any target down, you need to check the configurations and make sure that the target is up and running. If the target is down, Prometheus will not be able to scrape the metrics from the target and you will not be able to visualize the metrics in Grafana. So make sure that all your targets are up and running.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/ps-cv/assets/img/grafana/prometheus-target-480.webp 480w,/ps-cv/assets/img/grafana/prometheus-target-800.webp 800w,/ps-cv/assets/img/grafana/prometheus-target-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/ps-cv/assets/img/grafana/prometheus-target.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Prometheus Targets" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Figure: Prometheus Targets </div> <h2 id="epilogue-this-is-just-the-beginning">Epilogue: This is Just the Beginning</h2> <p>Congratulations! You’ve taken your first steps into the world of Grafana and Prometheus. But remember, this is just the beginning of your journey. There’s so much more to explore and learn in the realm of monitoring and alerting. Dive deeper into the world of Grafana plugins, explore the vast landscape of data sources, and master the art of creating stunning dashboards that tell a story. And don’t forget to share your knowledge with others in the Grafana community. Together, we can build a world where data is not just a number but a powerful tool for change. So go forth, brave explorer, and chart your course through the data-driven universe with Grafana and Prometheus as your trusty companions. Happy monitoring!</p>]]></content><author><name></name></author><category term="Observability"/><category term="data"/><category term="IoT"/><category term="Observability"/><summary type="html"><![CDATA[Tired of BI? Or Tableau too expensive? Well, try Grafana, or d3js(Come on, all the options available, don't get yourself robbed)]]></summary></entry><entry><title type="html">Something Factual about Suicide</title><link href="https://tingrubato.github.io/ps-cv/blog/2023/suicide/" rel="alternate" type="text/html" title="Something Factual about Suicide"/><published>2023-12-12T22:25:00+00:00</published><updated>2023-12-12T22:25:00+00:00</updated><id>https://tingrubato.github.io/ps-cv/blog/2023/suicide</id><content type="html" xml:base="https://tingrubato.github.io/ps-cv/blog/2023/suicide/"><![CDATA[<h2 id="1-spike-view">1. Spike View</h2> <div id="observablehq-chart-453be018"></div> <p>Credit: <a href="https://observablehq.com/d/74fd4258112cf216@459">Spike map by Ting Xu [1]</a></p> <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@observablehq/inspector@5/dist/inspector.css"/> <script type="module">
import {Runtime, Inspector} from "https://cdn.jsdelivr.net/npm/@observablehq/runtime@5/dist/runtime.js";
import define from "https://api.observablehq.com/d/74fd4258112cf216@459.js?v=4";
new Runtime().module(define, name => {
  if (name === "chart") return new Inspector(document.querySelector("#observablehq-chart-453be018"));
});
</script> <h2 id="data-source">Data Source:</h2> <ol> <li>NCHS Vital Statistics System for numbers of deaths. Bureau of Census for population estimates.</li> </ol>]]></content><author><name></name></author><category term="Visualization"/><category term="analysis"/><category term="data"/><summary type="html"><![CDATA[It could not happen to anyone around me.]]></summary></entry></feed>